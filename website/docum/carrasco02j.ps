%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: carrasco-01.dvi
%%Pages: 22
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Palatino-Bold Palatino-Roman Palatino-Italic
%%+ Palatino-BoldItalic
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o carrasco-01.ps carrasco-01
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.01.03:1619
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "1 July 1998",
%   filename = "8r.enc",
%   email = "tex-fonts@@tug.org",
%   docstring = "Encoding for TrueType or Type 1 fonts
%                to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both 
% ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (carrasco-01.dvi)
@start
%DVIPSBitmapFont: Fa cmmi6 6 1
/Fa 1 120 df<D807801470260FE00313F83938F007801230006090380F007812C01638
EAC1E00001011E1330EA03C0A34848481360A316C0A2ED0180147C00039038DC03009038
E1DF063901FF8FFC39007E03F825177D952C>119 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmsy9 9 5
/Fb 5 104 df<007FB712FCB812FEA26C16FC2F047A943C>0 D<156015F0B3B3AB007FB8
12E0B912F0A26C17E034347CB33D>63 D<0060ED018000F0ED03C0B3AF6C1507A2007CED
0F80A26CED1F00003F5D6C6C147ED80FE0495AD807F8EB07F83A01FF807FE06C90B55A01
3F91C7FC010F13FC010013C02A307CAD33>91 D<EC07E0143FECFE00EB03F8495A495A5C
131F5CB3A5133F91C7FC137E5BEA03F8EA7FE048C8FCEA7FE0EA03F8C67E137E7F80131F
B3A580130F806D7E6D7EEB00FEEC3FE014071B4B7BB726>102 D<12FCEAFFC0EA07F0EA
01FC6C7E137F7F80131FB3A580130F6D7E6D7EEB01FC9038007FC0EC1FE0EC7FC0903801
FC00EB03F0495A495A131F5CB3A5133F91C7FC5B13FE485AEA07F0EAFFC000FCC8FC1B4B
7BB726>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmr6 6 1
/Fc 1 44 df<1438B2B712FEA3C70038C7FCB227277C9F2F>43 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmtt9 9 3
/Fd 3 115 df<3803FFC0000F13F04813FC4813FF811380EC1FC0381F000F000480C712
07A2EB0FFF137F0003B5FC120F5A383FFC07EA7FC0130012FE5AA46C130F007F131FEBC0
FF6CB612806C15C07E000313F1C69038807F8022207C9F27>97 D<EA7FE0487EA3127F12
03A914FF01F313C090B512F08181EC81FE49C67E49EB3F8049131F16C049130FA216E015
07A6150F16C07F151F6DEB3F80157F6DEBFF009038FF83FEECFFFC5D5D01F313C02601E0
FEC7FC232E7FAD27>I<397FFC03FC39FFFE0FFF023F13804A13C0007F90B5FC39007FFE
1F14F89138F00F809138E002004AC7FC5CA291C8FCA2137EAD007FB57EB67EA36C5C2220
7E9F27>114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmmi9 9 4
/Fe 4 120 df<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E120C
121C5A5A126009177A8715>59 D<011F131F90397FC07FE09039E3E1E0F09039C3E38078
3A01C1F7007CD981FE133CD983FC133E00035BEB03F0163FEA0707120600025B1200010F
147F167E5CA2011F14FE16FC5CA2013FEB01F8A291380003F016E0491307ED0FC0028013
80ED1F009038FFC03E9038FEE0F89038FC7FE0EC1F80000190C8FCA25BA21203A25BA212
07A25BB57EA3283083A027>112 D<903801F803903807FE0790381F071F90387C03BF90
38F801BED801F013FE00031300485A4913FC120F485A1401D83F0013F8A3481303007E14
F0A300FE13074814E0A3140F15C0127C141F143F003CEB7F80003E13FF381E01DF380F07
BF3907FE3F00EA00F813005C147EA314FE5CA21301A25C90387FFFE090B5FCA220307EA0
22>I<01F01507D803FC903903800F80D8071E903907C01FC0D80E1F130F121C00380180
140F0030021F1307013FEC8003007013000060160149133FD8E07E168000401500EA00FE
494913030001170049137EA203FE5B00031606495B170E170CA24B131C4915186D15384A
6C5B17600001010314E03B00F8077E01C0903A7C0E3F078090273FFC0FFEC7FC903907F0
01F832227EA037>119 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmr9 9 19
/Ff 19 119 df<14C01301EB0380EB0F00130E5B133C5B5BA2485A485AA212075B120F90
C7FC5AA2121E123EA3123C127CA55AB0127CA5123C123EA3121E121FA27E7F12077F1203
A26C7E6C7EA213787F131C7F130FEB0380EB01C01300124A79B71E>40
D<12C07E1270123C121C7E120F6C7E6C7EA26C7E6C7EA27F1378137C133C133EA2131E13
1FA37F1480A5EB07C0B0EB0F80A514005BA3131E133EA2133C137C137813F85BA2485A48
5AA2485A48C7FC120E5A123C12705A5A124A7CB71E>I<EB0FE0EB7FFCEBF83E3903E00F
803907C007C0EB8003000F14E0391F0001F0A24814F8A2003E1300007E14FCA500FE14FE
B2007E14FCA56CEB01F8A36C14F0A2390F8003E03907C007C0A23903E00F803900F83E00
EB7FFCEB0FE01F347DB126>48 D<13075B5B137FEA07FFB5FC13BFEAF83F1200B3B3A249
7E007FB51280A319327AB126>I<EB3FC0EBFFF0000313FC380F80FF391E007F80001CEB
3FC048EB1FE048130F15F00060130712FC6C14F87E1403A3007E1307123CC7FC15F0A214
0F15E0EC1FC0A2EC3F801500147E5C495A5C495A495A495A49C7FC133E133C4913185B48
5A48481330485A48C7FC001C1470001FB512F05A5AB612E0A31D327CB126>I<EB7F8038
03FFF0380F80FC381C003E003F133F6D6C7E6E7EA26E7EEA1F00C7FCA4EB01FF131FEBFF
873803FC07EA0FF0EA1FC0EA3F80127F13004815C05AA3140FA26C131F6C133B3A3F8071
F180391FC1E1FF2607FFC013003900FE003C22237DA126>97 D<EB07F8EB3FFF9038FC07
C03901F000E03903E003F03807C007120FEA1F80123F90380003E04890C7FCA2127E12FE
AA127FA26C14187F001F14386D1330000F14706C6C13E03903F001C03900FC0F8090383F
FE00EB07F01D237EA122>99 D<EB0FE0EB7FFCEBF83F3903F00F80D807E013C0390FC007
E0381F800315F0EA3F0014014814F8127EA212FEA2B6FCA248C8FCA5127E127FA26C1418
A26C6C1338000F14306D13706C6C13E03901F003C03900FC0F00EB3FFEEB07F01D237EA1
22>101 D<151F90391FC07F809039FFF8E3C03901F07FC73907E03F033A0FC01F838090
39800F8000001F80EB00074880A66C5CEB800F000F5CEBC01F6C6C48C7FCEBF07C380EFF
F8380C1FC0001CC9FCA3121EA2121F380FFFFEECFFC06C14F06C14FC4880381F0001003E
EB007F4880ED1F8048140FA56C141F007C15006C143E6C5C390FC001F83903F007E0C6B5
1280D91FFCC7FC22337EA126>103 D<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCAAEA
07E012FFA3120F1207B3A6EA0FF0B5FCA310337EB215>105 D<EA07E012FFA3120F1207
B3B3A7EA0FF0B5FCA310347EB315>108 D<EB07F0EB3FFE9038FC1F803901F007C03903
C001E000078048486C7E48C7127CA248147E003E143E007E143FA300FE1580A8007E1500
A36C147EA26C147C6D13FC6C6C485A00075C3903F007E03900FC1F80D93FFEC7FCEB07F0
21237EA126>111 D<3903F03F8000FFEBFFE09038F3C0F89038F7007ED807FE7F6C48EB
1F804914C049130F16E0ED07F0A3ED03F8A9150716F0A216E0150F16C06D131F6DEB3F80
160001FF13FC9038F381F89038F1FFE0D9F07FC7FC91C8FCAA487EB512C0A325307EA02B
>I<903807F00390383FFC07EBFC0F3901F8038F3807E001000F14DF48486CB4FC497F12
3F90C77E5AA25A5AA9127FA36C6C5B121F6D5B000F5B3907E003BF3903F0073F3800F81E
EB3FF8EB0FE090C7FCAAED7F8091380FFFFCA326307DA029>I<3803E07C38FFE1FF9038
E38F809038E71FC0EA07EEEA03ECA29038FC0F8049C7FCA35BB2487EB512E0A31A217FA0
1E>I<EBFF06000713CE381F00FE003C133E48131E140E5A1406A27EA200FE90C7FC6C7E
EA7FFC383FFFC014F0000F7F6C7FC67FEB0FFF1300EC3F8000C0131F140F6C1307A37E15
006C5B6C130E6C5B38F7807838E1FFE038C07F8019237EA11E>I<1330A51370A313F0A2
1201A212031207381FFFFEB5FCA23803F000AF1403A814073801F806A23800FC0EEB7E1C
EB1FF8EB07E0182F7FAD1E>I<D803F0133F00FFEB0FFFA30007EB007F000380B35DA35D
12016D4813800000903803BFFC90387E073FEB1FFED907F8130026227EA02B>I<B5EBFF
F0A3D80FF0EB3F800007EC1F000003140E150C6D131C00011418A26C6C5BA26D1370017E
1360137F6D5BA290381F8180A214C3010F90C7FCA2EB07E6A214FE6D5AA26D5AA36D5AA2
146024217E9F29>I E
%EndDVIPSBitmapFont
/Fg 134[37 37 2[42 25 29 29 1[37 33 42 58 21 1[21 21
37 37 21 29 37 30 1[33 13[42 2[46 1[58 1[42 2[25 2[42
46 1[50 1[54 11[37 2[37 37 37 2[25 19 2[25 25 21 39[{
TeXBase1Encoding ReEncodeFont}38 74.7198 /Palatino-Italic
rf /Fh 136[62 1[46 25 33 29 2[42 46 66 25 46 1[25 1[42
29 37 46 33 16[54 11[42 4[58 7[37 37 37 37 37 37 37 37
37 37 48[{TeXBase1Encoding ReEncodeFont}29 74.7198 /Palatino-Bold
rf
%DVIPSBitmapFont: Fi cmtt10 10 3
/Fi 3 115 df<3801FFF0000713FE001F6D7E15E048809038C01FF81407EC01FC381F80
000006C77EC8127EA3ECFFFE131F90B5FC1203120F48EB807E383FF800EA7FC090C7FC12
FE5AA47E007F14FEEB8003383FE01F6CB612FC6C15FE6C14BF0001EBFE1F3A003FF007FC
27247CA32C>97 D<EA7FF0487EA3127F1201AAEC1FE0ECFFF801FB13FE90B6FC16809138
F07FC09138801FE091380007F049EB03F85BED01FC491300A216FE167EA816FE6D14FCA2
ED01F86D13036DEB07F0150F9138801FE09138E07FC091B51280160001FB5B01F813F839
00F03FC027337FB22C>I<D87FFEEB3FC0B53801FFF0020713F8021F13FC6C5B39003F7F
E1ECFF019138FC00F84A13704A13005CA25C5CA391C8FCAF007FB512E0B67EA36C5C2624
7EA32C>114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmex10 10 1
/Fj 1 27 df<161E167EED01FE1507ED0FF8ED3FE0ED7FC0EDFF80913801FE004A5A4A5A
5D140F4A5A5D143F5D147F92C7FCA25C5CB3B3B3A313015CA3495AA213075C495AA2495A
495A137F49C8FC485A485AEA07F0EA1FE0485AB4C9FC12FCA2B4FCEA3FC06C7EEA07F0EA
03FC6C7E6C7E6D7E133F6D7E6D7EA26D7E801303A26D7EA3801300B3B3B3A38080A28114
3F81141F816E7E1407816E7E6E7E913800FF80ED7FC0ED3FE0ED0FF8ED07FE1501ED007E
161E27C675823E>26 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmmi7 7 2
/Fk 2 120 df<130E131F5BA2133E131C90C7FCA7EA03E0487EEA0C78EA187C1230A212
605B12C0A2EA01F0A3485AA2485AA2EBC180EA0F81A2381F0300A213066C5A131CEA07F0
6C5A11287DA617>105 D<D803E0EC0380486CEB7007D80C789038F80FC0EA187C003090
3801F0071603126001F8140100C0D903E01380A2EA01F0A2913907C00300EA03E0A33A07
C00F8006A25EA2160816180003011F5B01E0EBC0703A01F073E0E03A00FFE1FF8090261F
807FC7FC2A1B7D9930>119 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmsy7 7 3
/Fl 3 49 df<B712FEA327037A8F34>0 D<1338A50060130C00F8133E00FC137E00FE13
FE383FBBF83807FFC000011300EA007C48B4FC000713C0383FBBF838FE38FE00FC137E00
F8133E0060130C00001300A517197B9A22>3 D<13E0EA01F0EA03F8A3EA07F0A313E0A2
120F13C0A3EA1F80A21300A25A123EA35AA3127812F8A25A12100D1E7D9F13>48
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmsy10 10 22
/Fm 22 107 df<007FB81280B912C0A26C17803204799641>0 D<121C127FEAFF80A5EA
7F00121C0909799917>I<0060150600F8150F6C151F007E153F6C157E6C6C14FC6C6CEB
01F86C6CEB03F06C6CEB07E06C6CEB0FC06C6CEB1F80017EEB3F006D137E6D6C5A90380F
C1F8903807E3F0903803F7E06DB45A6D5B6EC7FCA24A7E497F903803F7E0903807E3F090
380FC1F890381F80FC90383F007E017E7F49EB1F804848EB0FC04848EB07E04848EB03F0
4848EB01F84848EB00FC48C8127E007E153F48151F48150F00601506282874A841>I<EB
1FF0EBFFFE487F000714C04814E04814F04814F8A24814FCA3B612FEA96C14FCA36C14F8
A26C14F06C14E06C14C0000114006C5BEB1FF01F1F7BA42A>15 D<020FB6128091B712C0
1303010F1680D91FF8C9FCEB7F8001FECAFCEA01F8485A485A485A5B48CBFCA2123EA25A
A2127812F8A25AA87EA21278127CA27EA27EA26C7E7F6C7E6C7E6C7EEA00FEEB7F80EB1F
F86DB71280010316C01300020F158091CAFCAE001FB812804817C0A26C1780324479B441
>18 D<EF0180EF07C0171FEF7F80933801FF00EE07FCEE1FF0EE7FC04B48C7FCED07FCED
1FF0ED7FC04A48C8FCEC07FCEC1FF0EC7FC04948C9FCEB07FCEB1FF0EB7FC04848CAFCEA
07FCEA3FF0EA7FC048CBFC5AEA7F80EA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE
903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE923800FF80EE3FE0
EE0FF8EE03FE933800FF80EF3FC0170FEF038094C7FCAE007FB81280B912C0A26C178032
4479B441>20 D<1478A414F85CA213015C1303495AA2495A49CCFC5B137E5B485A485AEA
0FE0003FBA12FEBCFCA2003F19FED80FE0CCFCEA03F06C7E6C7E137E7F7F6D7E6D7EA26D
7E1301801300A2801478A4482C7BAA53>32 D<181EA4181F84A285180785727EA2727E72
7E85197E85F11F80F10FC0F107F0007FBA12FCBCFCA26C19FCCCEA07F0F10FC0F11F80F1
3F00197E61614E5A4E5AA24E5A61180F96C7FCA260181EA4482C7BAA53>I<173CA2173E
171E171F8384717E170384717E717E187C007FB812FEBAFC856C84CBEA03F0727EF000FE
F13F80F11FE0F107F8F101FFA2F107F8F11FE0F13F80F1FE00F001F84E5A007FB912C0BA
5A96C7FC6C5FCB127C604D5A4D5A6017074D5A95C8FC5F171E173E173CA248307BAC53>
41 D<91381FFFFE91B6FC1303010F14FED91FF0C7FCEB7F8001FEC8FCEA01F8485A485A
485A5B48C9FCA2123EA25AA2127812F8A25AA2B712FE16FFA216FE00F0C9FCA27EA21278
127CA27EA27EA26C7E7F6C7E6C7E6C7EEA00FEEB7F80EB1FF06DB512FE010314FF130002
1F13FE283279AD37>50 D<EE0180EE03C01607A2EE0F80A2EE1F00A2163EA25EA25EA24B
5AA24B5AA24B5A150F5E4BC7FCA2153EA25DA25DA24A5AA24A5AA24A5AA24A5AA24AC8FC
A2143EA25CA25CA2495AA2495AA2495AA2495AA249C9FCA2133EA25B13FC5B485AA2485A
A2485AA2485AA248CAFCA2123EA25AA25AA25A12602A4E75BB00>54
D<0060161800F0163C6C167CA200781678007C16F8A2003C16F0003E1501A26CED03E0A2
6C16C06D1407A2000716806D140FA26C6CEC1F00A26CB612FEA36C5D01F8C7127CA2017C
5CA2013C5C013E1301A2011E5C011F1303A26D6C485AA201075CECC00FA2010391C7FC6E
5AA2903801F03EA20100133CECF87CA2EC7878EC7CF8A2EC3FF0A26E5AA36E5AA36E5A6E
C8FC2E3C80B92F>56 D<007FB612F0B712F8A27EC91278B3A5003FB612F85AA27EC91278
B3A5007FB612F8B7FCA26C15F0253A7CB92E>I<15301578B3B3AD007FB812F8B912FCA2
6C17F836367BB541>63 D<EE01FCEE0FFEEE7FFF4BB5FC4B1480ED0F03ED1E014B7E157C
4B137F4A5A020315004B137E0207147C4A48137017C04A4890C7FCA24AC9FCA25C147E14
FEA25C1301A25C1303A3495AA4495AA4495AA35C133F91CAFCA2137E182049ED01E01703
4848ED0FC0D9F7F8141F48B56C148003F014004802FF133E48EDF03C0107ECFFF8261E00
7F14E048010F5C0070010049C7FC00C0EC0FF0333D7EBA39>76 D<0060161800F0163CB3
B26C167CA2007C16F8A26CED01F0003F15036C6CEC07E06C6CEC0FC0D807F0EC3F80D803
FE903801FF003A00FFC00FFC6DB55A011F14E0010391C7FC9038007FF82E347CB137>91
D<EC7FF80103B5FC011F14E0017F14F89039FFC00FFC3A03FE0001FFD807F09038003F80
D80FC0EC0FC04848EC07E048C8EA03F0003E150148ED00F8A248167CA248163CB3B20060
16182E347CB137>I<14034A7E4A7EA24A7EA34A7EA2EC7CF8A2ECF87CA2ECF03C010113
3EA249487EA249486C7EA249486C7EA2EC00034980A2013E6D7EA2496D7EA20178147801
F8147CA2484880A2484880A24848EC0F80A2491407000F16C0A248C8EA03E0A2003EED01
F0A2003C1500007C16F8A248167CA248163C006016182E347CB137>94
D<0060161800F0163C6C167CA2007C16F8A2003C16F0003E1501A26CED03E0A26C6CEC07
C0A2000716806D140FA26C6CEC1F00A26C6C143EA26C6C5CA201781478017C14F8A26D49
5AA26D495AA26D5CEC8007A26D6C485AA26D6C48C7FCA2903801F03EA20100133CECF87C
A2EC7CF8A2EC3FF0A26E5AA36E5AA26E5A6EC8FC2E347CB137>I<EC01F8140FEC3F80EC
FC00495A495A495AA2130F5CB3A7131F5C133F49C7FC13FEEA03F8EA7FE048C8FCEA7FE0
EA03F8EA00FE137F6D7E131F80130FB3A7801307A26D7E6D7E6D7EEC3F80EC0FF814011D
537ABD2A>102 D<12FCEAFFC0EA07F0EA01FCEA007E7F80131F80130FB3A7801307806D
7E6D7EEB007EEC1FF0EC07F8EC1FF0EC7E00495A495A495A5C130F5CB3A7131F5C133F91
C7FC137E485AEA07F0EAFFC000FCC8FC1D537ABD2A>I<126012F0B3B3B3B3A912600453
77BD17>106 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmr7 7 14
/Fn 14 121 df<140EB3A2B812E0A3C7000EC8FCB3A22B2B7DA333>43
D<EB3F803801FFF03803E0F83807803C48487E001E7F003E1480A2003C1307007C14C0A4
00FC14E0AE007C14C0A36CEB0F80A36CEB1F006C131E6C6C5A3803E0F86CB45A38003F80
1B277EA521>48 D<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521
>I<13FF000313E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC
15005C143E147E147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA0180390300
030012065A001FB5FC5A485BB5FCA219267DA521>I<13FE3807FFC0380F03E0381C00F0
003E1378003F137C143C143E121EC7FCA3EB3FFEEA01FF3807F03EEA1FC0EA3F00127EA2
481418A3147E127EECDF38393F838FF0390FFE0FE03903F807C01D1C7E9A21>97
D<EB3FC0EBFFF83803E03C3807C00E380F801F381F003F123EA2007E131E007C1300A212
FCA7127C127E1403123E6C1306EA0F803807C00C3803F0383800FFE0EB3F80181C7E9A1E
>99 D<133F3801FFE03803E1F0380F80F8381F007C143E123E007E131E141F127C12FCA2
B6FCA200FCC7FCA4127C127E1403123E6C1307380F800E3807C01C3803E0783800FFE0EB
3F80181C7E9A1E>101 D<EA0F8012FFA2121F120FB3AFEA1FC0EAFFF8A20D287EA713>
108 D<380F81FC38FF8FFF90389C0F80391FB007C0EA0FE09038C003E0A31380AF391FC0
07F039FFF83FFEA21F1A7E9925>110 D<380F07C038FF1FF0EB38F8EA1F71EA0F6113C1
EBC0F014005BAF487EEAFFFCA2151A7E991A>114 D<3803F840380FFEC0EA3C07EA7803
EA7001EAF000A37E6C1300EA7FC013FC6CB4FC6C1380000713C0C613E0130738C003F013
0113007EA26C13E0130100F813C038EE078038C7FF00EA81FC141C7E9A1A>I<13C0A412
01A312031207120F121FB512E0A23807C000AC1430A73803E060A23801F0C03800FF80EB
3F0014257FA31A>I<390F8003E000FF133FA2001F1307000F1303B01407A20007130F90
38C01BF03903E073FE3801FFE339007F83E01F1B7E9925>I<39FFF81FFCA2390FF00FE0
D807E01380D803F013003801F80E00005BEB7C386D5AEB3FE06D5A130F130780497EEB1D
F8EB38FCEB707EEBE03E48487E0003EB0F80000714C0001F14E039FFE01FFEA21F197F98
23>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmr10 10 35
/Fo 35 120 df<B812FEA3D87FE0C7121F16016C6CEC007F6C6C151FA26C6C816C6C81A2
6C6C816C7F7E6E15806D6C14016D7EA26D7E6D6C91C7FCA26D7E6D7EA26D7F6D7FA26E7E
143FA26E5A6E5A6EC9FC140E5C5C14300270EC01805C495A495A49C81203010E16005B5B
495D5B48485D48485D90C95A485E000E4B5A48ED1FFE003FB7FC5AB8FCA231397BB83C>
6 D<B612F8A31D037AB02A>22 D<146014E0EB01C0EB0380EB0700130E131E5B5BA25B48
5AA2485AA212075B120F90C7FCA25A121EA2123EA35AA65AB2127CA67EA3121EA2121F7E
A27F12077F1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00E01460135278BD
20>40 D<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C133C133E131EA2
131F7FA21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA2133E133C137C
1378A25BA2485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20>I<15301578B3A600
7FB812F8B912FCA26C17F8C80078C8FCB3A6153036367BAF41>43
D<EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007147C48487FA248C7
7EA2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C1580A36C15006D5B00
0F143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7DB72A
>48 D<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C3879B7
2A>I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E12300070
6D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F4A5A
4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B49130348481400485A48
5A000EC75A000FB6FC5A5A485CB6FCA321387CB72A>I<EB07F8EB3FFF4913C03901F80F
F03903C007F848486C7E380E0001000F80381FE0006D7FA56C5A6C5AC85A1401A25D4A5A
A24A5A5DEC0F80027EC7FCEB1FFCECFF809038000FE06E7EEC01FC816E7EED7F80A216C0
A2153F16E0A2121EEA7F80487EA416C049137F007F1580007EC7FC0070ECFF006C495A12
1E390F8003F83907F00FF00001B512C06C6C90C7FCEB0FF8233A7DB72A>I<1538A21578
15F8A2140114031407A2140F141F141B14331473146314C313011483EB03031307130613
0C131C131813301370136013C01201EA038013005A120E120C5A123812305A12E0B712F8
A3C73803F800AB4A7E0103B512F8A325397EB82A>I<0006140CD80780133C9038F003F8
90B5FC5D5D158092C7FC14FC38067FE090C9FCABEB07F8EB3FFE9038780F803907E007E0
90388003F0496C7E12066E7EC87EA28181A21680A4123E127F487EA490C71300485C12E0
00605C12700030495A00385C6C1303001E495A6C6C485A3907E03F800001B5C7FC38007F
FCEB1FE0213A7CB72A>I<EC3FC0903801FFF0010713FC90380FE03E90383F800790387E
001F49EB3F804848137F485AA2485A000FEC3F0049131E001F91C7FCA2485AA3127F90C9
FCEB01FC903807FF8039FF1E07E090383801F0496C7E01607F01E0137E497FA249148016
C0151FA290C713E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B15FE6C6C5B6C6C
485A3900FE07F090383FFFC06D90C7FCEB03FC233A7DB72A>I<121C127FEAFF80A5EA7F
00121CC7FCB2121C127FEAFF80A5EA7F00121C092479A317>58 D<007FB812F8B912FCA2
6C17F8CCFCAE007FB812F8B912FCA26C17F836167B9F41>61 D<B712C016F816FE000190
398001FF806C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601A217FFA717FEA2EE03FC
A2EE07F817F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FCB3A5487FB6FCA330397D
B839>80 D<EB1FE0EBFFFC3803E03F3907000F80390F8007E0486C6C7E13E06E7EA26E7E
6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C
12FEA31401A26C13036CEB077C903980063E18383FC01E3A0FE0781FF03A03FFF00FE03A
007F8007C026277DA52A>97 D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E90
39F3801F809039F7000FC001FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167F
AA167E16FEA216FC15016D14F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881
E07E903800FFF8C7EA1FC0283B7EB92E>I<EB03FC90381FFF8090387E03E03901F80070
484813F83907E001FC380FC003A2EA1F80123F90380001F848EB00F01500A2127E12FEAA
127E127FA26C14067F001F140E6D130C000F141C6C6C13386C6C13706C6C13E039007C07
C090381FFF00EB07F81F277DA525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90
387E078F9038F801EF3903F0007F4848133F4848131FA24848130F123F90C7FC5AA2127E
12FEAA127E127FA27EA26C6C131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF3900
7C078F90381FFE0FD907F813C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E0
3903F001F0D807E013F8380FC0004848137CA248C7127E153E5A153F127E12FEA3B7FCA2
48C8FCA5127EA2127FA26C14037F001F14076C6C13060007140E6D131CD801F013386C6C
137090387E03E090381FFF80903803FC0020277EA525>I<ED03F090390FF00FF890393F
FC3C3C9039F81F707C3901F00FE03903E007C03A07C003E010000FECF000A248486C7EA8
6C6C485AA200075C6C6C485A6D485A6D48C7FC38073FFC38060FF0000EC9FCA4120FA213
C06CB512C015F86C14FE6CECFF804815C03A0F80007FE048C7EA0FF0003E140348140116
F8481400A56C1401007C15F06CEC03E0003F1407D80F80EB0F80D807E0EB3F003901FC01
FC39007FFFF0010790C7FC26387EA52A>103 D<EA03F012FFA3120F1203B0EC0FF0EC3F
FCECF03F9039F1C01F809039F3800FC0EBF70013FE496D7EA25BA35BB3A3486C497EB500
C1B51280A3293A7EB92E>I<EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA312
071203B3AA487EB512C0A312387EB717>I<EA03F012FFA3120F1203B3B3AD487EB512C0
A3123A7EB917>108 D<2703F00FF0EB1FE000FFD93FFCEB7FF8913AF03F01E07E903BF1
C01F83803F3D0FF3800FC7001F802603F70013CE01FE14DC49D907F8EB0FC0A2495CA349
5CB3A3486C496CEB1FE0B500C1B50083B5FCA340257EA445>I<3903F00FF000FFEB3FFC
ECF03F9039F1C01F803A0FF3800FC03803F70013FE496D7EA25BA35BB3A3486C497EB500
C1B51280A329257EA42E>I<EB03FE90380FFF8090383E03E09038F800F84848137C4848
7F48487F4848EB0F80001F15C090C712074815E0A2007EEC03F0A400FE15F8A9007E15F0
A2007F14076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C6C137EC66C13F89038
7E03F090381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000FFEB7FF89038F1E07E90
39F3801F803A0FF7000FC0D803FEEB07E049EB03F04914F849130116FC150016FEA3167F
AA16FEA3ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039F7803F009038F1E07E
9038F0FFF8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D903F813C090381FFE0190
387E07819038FC01C33903F000E3000714774848133749133F001F141F485A150F48C7FC
A312FEAA127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF3901F801CF39007E078F
90381FFE0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>I<3807E01F00FFEB7FC0
9038E1E3E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300A45BB3A2
487EB512F0A31C257EA421>I<EBFF03000313E7380F80FF381E003F487F487F00707F12
F0A2807EA27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F01071380EB007F14
1F00C0EB0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C38E1FFF038C0
3F801A277DA521>I<1318A51338A31378A313F8120112031207001FB5FCB6FCA2D801F8
C7FCB215C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F81A347FB220>I<D803
F0EB07E000FFEB01FFA3000FEB001F00031407B3A4150FA3151F12016D133F0000EC77F8
6D9038E7FF8090383F03C790381FFF87903A03FC07E00029267EA42E>I<B538803FFEA3
3A0FF8000FF06C48EB07E00003EC03C06D148000011500A26C6C1306A26D130E017E130C
A26D5BA2EC8038011F1330A26D6C5AA214E001075BA2903803F180A3D901FBC7FCA214FF
6D5AA2147CA31438A227257EA32C>I<B53A1FFFE03FFEA3260FF8009038000FF86C4801
7EEB03E018C00003023EEB0180A26C6C013FEB0300A36C6CEC8006156FA2017E9038EFC0
0C15C7A2D93F016D5A15830281EBF038D91F831430150102C3EBF87090260FC6001360A2
D907E66D5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7FA20100141E4A130E02
60130C37257EA33C>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmmi10 10 17
/Fp 17 127 df<1403EC3FF891387FFF80D901E313C014800103133F9138001F80ED0700
92C7FC80A280A2808013018080130080147F81143F8149B47E130790380F8FF0EB3E0F49
6C7E13F83801F003D803E07F1207380FC0011380121FEA3F0014005A127EA212FE5D4813
01A35DA24813035D6C13075D127C4A5A6C91C7FC5C6C133E6C6C5A3807C0F03801FFE0D8
003FC8FC223D7DBB25>14 D<EC3FF0EB01FF010F13E090383FC00049C7FC13FCEA03F848
5A5B120F485AA2485AA2387FFFFE80A290C8FC5A5AA5127EA4123E123F7E6C6C13606D13
E03903E003C03901F01F0038007FFCEB0FE01C257DA322>I<121C127FEAFF80A5EA7F00
121C0909798817>58 D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313
005A1206120E5A5A5A12600A19798817>I<0103B812E05BA290260007F8C7123F4B140F
F003C0140F18015DA2141FA25D1980143FA25D1760027F14E095C7FC92C75AA24A1301A2
4A495A16070101141F91B6FC94C8FCA2903903FC001F824A130EA21307A24A130CA2010F
141CA24A90C9FCA2131FA25CA2133FA25CA2137FA291CBFC497EB612C0A33B397DB835>
70 D<0103B6FC5B5E90260007FCC8FC5D5D140FA25DA2141FA25DA2143FA25DA2147FA2
92C9FCA25CA25CA21301A25CA21303A25CA2130718404A15C0A2010F150118804A1403A2
011F16005F4A1406170E013F151E171C4A143C177C017F5D160391C7120F49EC7FF0B8FC
A25F32397DB839>76 D<902603FFF893383FFF80496081D900079438FF80000206DC01BF
C7FCA2020E4C5A1A7E020C1606190CDA1C7E16FE4F5A02181630A20238166162023016C1
F00181DA703F158395380303F002601506A202E0ED0C076202C01518183001016D6C140F
06605B028015C0A20103923801801FDD03005B140092380FC00649173F4D91C8FC01065D
A2010E4B5B4D137E130C6F6C5A011C17FEDCE1805B011802E3C7FCA2013802E6130104EC
5C1330ED03F8017016034C5C01F05CD807FC4C7EB500E0D9C007B512F01680150151397C
B851>I<4BB4FC031F13F09238FE01FC913903F0007EDA07C0EB1F80DA1F80EB0FC0023E
C7EA07E002FCEC03F0495A4948EC01F8495A4948EC00FC495A49C912FE49167E13FE4916
7F1201485AA2485AA2120F5B001F17FFA2485AA34848ED01FEA400FFEE03FC90C9FCA2EF
07F8A2EF0FF0A218E0171F18C0EF3F806C167F180017FE4C5A6C6C5D1603001F4B5A6D4A
5A000FED1F806C6C4AC7FC6D147E0003EC01F8D801FC495AD8007EEB0FC090263F807FC8
FC903807FFF801001380383D7CBA3F>79 D<4BB4FC031F13F09238FE01FC913903F0007E
DA07C0EB1F80DA1F80EB0FC0023EC7EA07E002FCEC03F0495A4948EC01F8495A4948EC00
FC495A013F16FE49C9FC13FE187F485A12035B12075B120F4916FF121FA2485AA34848ED
01FEA448C9EA03FCA3EF07F8A218F0170F18E0171F18C0EF3F807EEF7F0017FEDA07C05B
6C90391FF001F8903980383803001F496C485A9139E00C0FE0260FC0C0EB1F80D807E1D9
0E3FC7FC0280137ED803F1EB07F8D801F95C3A007FC00FC0903A3FE07F0003903807FFFE
0100018F5BDA000F1306170E171E705A177CEEC1F816FF5FA25F5F6F5B6F48C7FCED00F8
384B7CBA42>81 D<0103B612F849EDFF8018E0903B0007F8001FF84BEB03FCEF00FE020F
157FA24BEC3F80A2021F16C0A25DA2143FF07F805DA2027FEDFF006092C7485A4D5A4A4A
5A4D5A4AEC1F80057FC7FC0101EC07F891B612E094C8FC9139FC000FC00103EC03F0707E
4A6D7E831307177E5C177F010F5D5F5CA2011F1401A25CA2133F16034A4A1360A2017F17
E019C091C71401496C01011480B61503933900FE0700EF7E0ECAEA1FFCEF07F03B3B7DB8
3F>I<147E903803FF8090390FC1C38090391F00EFC0017E137F49133F485A4848EB1F80
12075B000F143F48481400A2485A5D007F147E90C7FCA215FE485C5AA214015D48150CA2
1403EDF01C16181407007C1538007E010F1330003E131F027B13706C01E113E03A0F83C0
F9C03A03FF007F80D800FCEB1F0026267DA42C>97 D<14E0EB03F8A21307A314F0EB01C0
90C7FCAB13F8EA03FEEA070F000E1380121C121812381230EA701F1260133F00E0130012
C05BEA007EA213FE5B1201A25B12035BA20007131813E01438000F133013C01470EB8060
14E014C01381EB838038078700EA03FEEA00F815397EB71D>105
D<90390F8003F090391FE00FFC903939F03C1F903A70F8700F80903AE0FDE007C09038C0
FF80030013E00001491303018015F05CEA038113015CA2D800031407A25CA20107140FA2
4A14E0A2010F141F17C05CEE3F80131FEE7F004A137E16FE013F5C6E485A4B5A6E485A90
397F700F80DA383FC7FC90387E1FFCEC07E001FEC9FCA25BA21201A25BA21203A25B1207
B512C0A32C3583A42A>112 D<02FC13C0903803FF0190380F838390383F01C790397E00
EF8049137F485A4848133F000715005B485A001F5C157E485AA2007F14FE90C75AA34813
01485CA31403485CA314075D140F127C141F007E495A003E137F381F01EF380F839F3903
FF1F80EA00FC1300143F92C7FCA35C147EA314FE5C130190387FFFF0A322357DA425>I<
01F816F0D803FE9138E001F8D8070F903801F003000ED9800314FC121C12180038020713
010030EDE000D8701F167C1260030F143CD8E03F163800C001005B5BD8007E131F183001
FE5C5B033F1470000117604991C7FCA218E000034A14C049137E17011880170318005F03
FE1306170E000101015C01F801BF5B3B00FC039F8070903A7E0F0FC0E0903A1FFC03FFC0
902703F0007FC7FC36267EA43B>119 D<903907E001F090391FF807FC9039783E0E0F90
39E01F1C1FD801C09038383F803A03800FF07F0100EBE0FF5A000E4A1300000C157E021F
133C001C4AC7FC1218A2C7123FA292C8FCA25CA2147EA214FEA24A130CA20101141C001E
1518003F5BD87F81143801835C00FF1560010714E03AFE0E7C01C0D87C1C495A2778383E
0FC7FC391FF00FFC3907C003F029267EA42F>I<1504151E151FA2ED0F8016C0ED07E000
7FB612F0B712F8A26C15F0C8EA1FC0ED3F00157E5D5D5D1560251271BB2A>126
D E
%EndDVIPSBitmapFont
/Fq 75[25 29[37 27[37 42 39 62 42 45 24 32 30 42 45 41
43 66 22 42 1[22 43 42 25 36 46 33 41 37 7[50 1[75 54
58 46 39 50 1[45 59 62 71 46 54 25 25 62 57 42 46 58
53 46 58 6[19 37 37 37 37 37 37 37 37 37 37 1[19 25 19
2[25 25 22[21 14[45 2[{TeXBase1Encoding ReEncodeFont}68
74.7198 /Palatino-Roman rf /Fr 137[38 40 22 28 26 1[40
36 39 59 19 2[19 1[37 22 32 41 29 1[33 11[52 1[35 6[41
2[22 3[41 51 47 1[52 9[33 3[33 33 33 33 2[22 17 2[22
22 18 8[22 30[{TeXBase1Encoding ReEncodeFont}36 66.4176
/Palatino-Roman rf
%DVIPSBitmapFont: Fs cmsy8 8 3
/Fs 3 122 df<130C131EA50060EB01800078130739FC0C0FC0007FEB3F80393F8C7F00
3807CCF83801FFE038007F80011EC7FCEB7F803801FFE03807CCF8383F8C7F397F0C3F80
00FCEB0FC039781E078000601301000090C7FCA5130C1A1D7C9E23>3
D<ED7FF80207B57E021F14E091397FC00FF8D901FCC712FED903F0143FD90FC0EC0FC049
C8EA03E0013E6F7E0178ED0078498248488248488249820007188048CAEA03C0000E1701
001E18E0001C1700003C18F0003818700078187800701838A300F0183C48181CA96C183C
00701838A30078187800381870003C18F0001C18E0001E1701000E18C0000F17036C6CEE
0780000318006D5E6C6C161E6C6C5E01785E013E4B5A6D4B5AD90FC0EC0FC0D903F0023F
C7FCD901FC14FE903A007FC00FF8021FB512E0020714809126007FF8C8FC3E3D7CAE47>
13 D<1338137CA81338A7007C137CB512FEA3387C387C00001300A5137CB3A41338AD17
3D7CAE20>121 D E
%EndDVIPSBitmapFont
/Ft 134[46 42 69 46 51 28 37 32 51 51 46 51 74 28 51
1[28 51 46 1[42 51 37 51 42 11[65 1[51 60 2[69 1[83 3[32
2[46 51 1[60 1[65 6[21 3[42 42 42 42 42 42 2[21 28 42[51
2[{TeXBase1Encoding ReEncodeFont}43 83.022 /Palatino-Bold
rf /Fu 201[42 3[42 50[{TeXBase1Encoding ReEncodeFont}2
83.022 /Palatino-BoldItalic rf /Fv 105[42 28[42 42 60
42 46 28 32 32 38 42 37 46 65 23 37 1[23 42 42 23 32
42 34 38 37 3[28 1[28 6[51 7[46 2[28 4[65 55 51 6[21
21 3[42 2[42 42 42 42 1[21 28 21 2[28 28 37[44 2[{
TeXBase1Encoding ReEncodeFont}46 83.022 /Palatino-Italic
rf /Fw 104[83 28[42 46 43 69 47 50 27 35 33 46 50 45
48 73 24 46 19 24 48 46 28 40 51 37 46 42 3[28 1[28 3[83
60 65 51 44 55 1[50 65 69 79 51 60 1[28 69 63 46 51 64
59 51 65 5[21 21 42 42 42 42 42 42 42 42 42 42 1[21 28
21 2[28 28 23 36[50 2[{TeXBase1Encoding ReEncodeFont}69
83.022 /Palatino-Roman rf
%DVIPSBitmapFont: Fx cmsy6 6 2
/Fx 2 122 df<136013701360A20040132000E0137038F861F0387E67E0381FFF803807
FE00EA00F0EA07FE381FFF80387E67E038F861F038E060700040132000001300A2137013
6014157B9620>3 D<136013F0A81360A4387C63E0B512F0A2387C63E038006000A313F0
B3A21360A7142F7CA31E>121 D E
%EndDVIPSBitmapFont
/Fy 140[42 39 2[54 2[29 55 1[29 2[33 48 61 44 1[50 14[67
4[94 61 5[55 2[71 20[25 46[{TeXBase1Encoding ReEncodeFont}17
99.6264 /Palatino-Roman rf /Fz 138[88 48 64 56 2[80 88
128 48 2[48 2[56 72 88 64 1[72 13[88 5[143 3[56 2[80
2[104 1[112 19[48 45[{TeXBase1Encoding ReEncodeFont}21
143.462 /Palatino-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop -125 178 a Fz(Incremental)33 b(Construction)g(and)-125
344 y(Maintenance)h(of)h(Minimal)g(Finite-State)-125
510 y(Automata)-125 876 y Fy(Rafael)24 b(C.)h(Carrasco)686
844 y Fx(\003)1569 876 y Fy(Mikel)g(L.)g(For)n(cada)2311
844 y Fx(y)-125 952 y Fw(Universitat)c(d'Alacant)902
b(Universitat)20 b(d'Alacant)-99 1332 y Fv(Daciuk)25
b(et)h(al.)f([Computational)f(Linguistics)i Fu(26)p Fv(:1,)e(3\22616)g
(\(2000\)])f(describe)k(a)f(method)e(for)i(construct-)-125
1548 y(ing)g(incr)o(ementally)f(minimal,)g(deterministic,)h(acyclic)e
(\002nite-state)h(automata)g(\(dictionaries\))g(fr)o(om)g(sets)-125
1764 y(of)19 b(strings.)f(But)g(acyclic)g(\002nite-state)f(automata)g
(have)h(limitations:)f(for)i(instance,)g(if)f(one)h(wants)f(a)h
(linguis-)-125 1980 y(tic)29 b(application)e(to)h(accept)g(all)h
(possible)h(integer)f(numbers)h(or)f(internet)g(addr)o(esses,)g(the)f
(corr)o(esponding)-125 2196 y(\002nite-state)d(automaton)f(has)h(to)f
(be)i(cyclic.)e(In)h(this)g(paper)-6 b(,)24 b(we)i(describe)g(a)f
(simple)g(and)g(equally)g(ef\002cient)-125 2412 y(method)i(to)g(modify)
f(any)i(minimal)f(\002nite-state)g(automaton)g(\(be)h(it)f(acyclic)g
(or)h(not\))f(so)h(that)f(a)g(string)h(is)-125 2627 y(added)21
b(to)h(or)h(r)o(emoved)e(fr)o(om)g(the)h(language)g(accepted)f(by)h
(it;)g(both)f(operations)i(ar)o(e)f(very)g(important)f(when)-125
2843 y(performing)h(dictionary)f(maintenance)h(and)f(solve)h(the)f
(dictionary)g(construction)h(pr)o(oblem)f(addr)o(essed)h(by)-125
3059 y(Daciuk)j(et)h(al.)f(as)h(a)f(special)h(case.)f(The)g(algorithms)
g(pr)o(oposed)f(her)o(e)h(may)g(be)h(straightforwardly)e(derived)-125
3275 y(fr)o(om)16 b(the)g(customary)g(textbook)g(constructions)g(for)h
(the)f(intersection)h(and)f(the)g(complementation)f(of)i(\002nite-)-125
3491 y(state)25 b(automata;)e(the)h(algorithms)f(exploit)h(the)g
(special)g(pr)o(operties)h(of)f(the)g(automata)f(r)o(esulting)i(fr)o
(om)f(the)-125 3707 y(intersection)e(operation)e(when)h(one)g(of)g(the)
f(\002nite-state)g(automata)f(accepts)h(a)h(single)g(string.)-125
4032 y Ft(1)g(Introduction)-125 4331 y Fw(In)32 b(a)g(r)o(ecent)e
(paper)h(in)h(this)h(journal,)f(Daciuk)f(et)h(al.)f(\(2000\))e
(describe)i(two)h(methods)h(for)e(con-)-125 4531 y(str)o(ucting)24
b(incr)o(ementally)e(minimal,)h(deterministic,)f(acyclic)g
(\002nite-state)g(automata)g(\(dictionar)o(-)-125 4730
y(ies\))k(fr)o(om)f(sets)h(of)g(strings:)h(the)f(\002rst)g(method)g
(adds)f(strings)i(in)f(dictionary)g(or)o(der)f(and)g(the)h(sec-)p
-125 5007 1495 4 v -83 5085 a Fs(\003)16 b Fr(Departament)g(de)g
(Llenguatges)g(i)h(Sistemes)f(Inform)6 b(\036)-28 b(atics,)17
b(Universitat)f(d'Alacant,)h(E-03071)g(Alacant)g(\(Spain\))-80
5156 y Fs(y)f Fr(Departament)g(de)g(Llenguatges)g(i)h(Sistemes)f
(Inform)6 b(\036)-28 b(atics,)17 b(Universitat)f(d'Alacant,)h(E-03071)g
(Alacant)g(\(Spain\))-104 5461 y(c)-125 5463 y Fs(\015)g
Fr(2001)g(Association)h(for)f(Computational)g(Linguistics)p
eop
%%Page: 2 2
2 1 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)-125 158 y Fw(ond)24
b(one)g(is)f(for)g(unsorted)g(data.)f(Adding)h(an)g(entry)g(is)h(an)f
(important)g(dictionary)h(maintenance)-125 357 y(operation;)k(but)f(so)
g(is)h(r)o(emoving)f(an)g(entry)h(fr)o(om)e(the)i(dictionary)-9
b(,)26 b(for)h(example,)g(if)g(it)g(is)g(found)-125 556
y(to)j(be)f(incorr)o(ect.)f(Since)h(or)o(dering)g(cannot)h(obviously)g
(be)f(expected)f(in)h(the)h(r)o(emoval)e(case,)h(we)-125
756 y(will)22 b(focus)g(on)g(the)f(second,)g(mor)o(e)g(general,)g(pr)o
(oblem)g(\(a)f(solution)j(for)e(which)h(has)f(alr)o(eady)f(been)-125
955 y(sketched)h(by)g(Revuz)f(\(2000\)\).)25 1154 y(But)c(dictionaries)
g(or)g(acyclic)g(\002nite)h(automata)e(have)h(limitations:)h(for)f
(instance,)g(if)g(one)g(wants)-125 1353 y(an)28 b(application)g(to)g
(accept)f(all)g(possible)i(integer)f(numbers)g(or)g(internet)g(addr)o
(esses,)e(the)i(corr)o(e-)-125 1553 y(sponding)f(\002nite-state)d
(automaton)i(has)f(to)g(be)g(cyclic.)g(In)g(this)h(article,)e(we)h
(show)h(a)e(simple)i(and)-125 1752 y(equally)f(ef)o(\002cient)e(method)
i(to)f(modify)h Fv(any)e Fw(minimal)i(\002nite-state)f(automaton)h
(\(be)e(it)i(acyclic)e(or)-125 1951 y(not\))e(so)g(that)g(a)f(string)h
(is)g(added)e(to)i(or)g(r)o(emoved)e(fr)o(om)h(the)h(language)f
(accepted)f(by)i(it.)f(The)h(algo-)-125 2150 y(rithm)g(may)f(be)g
(straightforwar)o(dly)g(derived)f(fr)o(om)g(customary)i(textbook)f
(constr)o(uctions)i(for)e(the)-125 2350 y(intersection)26
b(and)f(the)g(complementation)i(of)e(\002nite-state)g(automata;)f(the)h
(r)o(esulting)h(algorithm)-125 2549 y(solves)h(the)f(dictionary)g
(constr)o(uction)h(pr)o(oblem)f(addr)o(essed)d(by)j(Daciuk)g(et)g
(al.'s)f(\(2000\))e(second)-125 2748 y(algorithm)f(as)e(a)h(special)f
(case.)25 2947 y(This)e(paper)f(has)h(the)h(following)g(parts:)e(in)i
(section)f(2,)g(we)g(give)g(some)g(necessary)g(mathemati-)-125
3147 y(cal)i(pr)o(eliminaries;)f(the)h(minimal)h(automata)e(r)o
(esulting)h(fr)o(om)f(adding)h(or)g(r)o(emoving)g(a)f(string)i(ar)o(e)
-125 3346 y(described)26 b(in)h(detail)f(in)g(section)i(3;)d(the)i
(algorithms)g(ar)o(e)e(described)h(in)g(section)i(4;)d(in)i(section)g
(5,)-125 3545 y(one)18 b(addition)f(and)f(one)h(r)o(emoval)g(example)f
(ar)o(e)f(explained)h(in)i(detail;)e(and,)g(\002nally)-9
b(,)17 b(some)g(closing)-125 3744 y(r)o(emarks)j(ar)o(e)g(given)h(in)g
(section)g(6.)-125 4060 y Ft(2)g(Mathematical)c(preliminaries)-125
4359 y(2.1)j(Finite-state)d(automata)h(and)i(languages)-125
4558 y Fw(As)36 b(in)h(\(Daciuk)e(et)h(al.,)g(2000\),)d(we)j(will)h
(de\002ne)f(a)f(deterministic)h(\002nite-state)g(automaton)h(as)-125
4757 y Fp(M)d Fo(=)24 b(\()p Fp(Q;)14 b Fo(\006)p Fp(;)g(\016)o(;)g(q)
421 4769 y Fn(0)457 4757 y Fp(;)g(F)e Fo(\))p Fw(,)22
b(wher)o(e)f Fp(Q)g Fw(is)h(a)f(\002nite)h(set)g(of)g(states,)f
Fp(q)1830 4769 y Fn(0)1892 4757 y Fm(2)k Fp(Q)c Fw(is)h(the)g(start)f
(state,)g Fp(F)37 b Fm(\022)24 b Fp(Q)d Fw(is)h(a)-125
4956 y(set)d(of)g(accepting)f(states,)g Fo(\006)g Fw(is)h(a)f(\002nite)
i(set)e(of)h(symbols)h(called)d(the)i(alphabet,)e(and)i
Fp(\016)26 b Fo(:)d Fp(Q)10 b Fm(\002)g Fo(\006)23 b
Fm(!)g Fp(Q)-125 5156 y Fw(is)i(the)g(next-state)f(mapping.)g(In)h
(this)g(paper)-6 b(,)23 b(we)h(will)h(de\002ne)g Fp(\016)i
Fw(as)d(a)g Fv(total)g Fw(mapping;)g(the)h(corr)o(e-)-125
5463 y(2)p eop
%%Page: 3 3
3 2 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)-125
158 y Fw(sponding)h(\002nite-state)e(automaton)h(will)g(be)f(called)g
Ft(complete)e Fw(\(Revuz,)i(2000\).)e(This)j(involves)g(no)-125
357 y(loss)g(of)f(generality)-9 b(,)18 b(as)g(any)g(\002nite-state)g
(automaton)g(may)g(be)g(made)g(complete)g(by)g(adding)g(a)f(new)-125
556 y Ft(absorption)k Fw(state)h Fm(?)g Fw(to)g Fp(Q)p
Fw(,)g(so)h(that)f(all)g(unde\002ned)g(transitions)h(point)g(to)g(it)f
(and)g Fp(\016)s Fo(\()p Fm(?)p Fp(;)14 b(a)p Fo(\))25
b(=)p Fm(?)d Fw(for)-125 756 y(all)h Fp(a)j Fm(2)g Fo(\006)p
Fw(.)c(Using)h(complete)f(\002nite-state)h(automata)e(is)i(convenient)g
(for)f(the)h(theor)o(etical)f(discus-)-125 955 y(sion)g(in)f(this)h
(paper;)d(r)o(eal)g(implementations)j(of)f(automata)f(and)g(the)h(corr)
o(esponding)g(algorithms)-125 1154 y(need)f(not)h(contain)g(an)f
(explicit)g(r)o(epr)o(esentation)e(of)i(the)h(absorption)f(state)g(and)
g(its)g(incoming)i(and)-125 1353 y(outgoing)h(transitions.)25
1553 y(For)28 b(complete)g(\002nite-state)f(automata,)g(the)h(extended)
f(mapping)h Fp(\016)2263 1522 y Fl(\003)2337 1553 y Fo(:)36
b Fp(Q)24 b Fm(\002)f Fo(\006)2634 1522 y Fl(\003)2708
1553 y Fm(!)36 b Fp(Q)28 b Fw(\(the)-125 1752 y(extension)22
b(of)f Fp(\016)j Fw(for)c(strings\))h(is)g(de\002ned)g(simply)g(as)1030
1948 y Fp(\016)1070 1918 y Fl(\003)1108 1948 y Fo(\()p
Fp(q)s(;)14 b(\017)p Fo(\))83 b(=)g Fp(q)972 2048 y(\016)1012
2018 y Fl(\003)1051 2048 y Fo(\()p Fp(q)s(;)14 b(ax)p
Fo(\))83 b(=)g Fp(\016)1554 2018 y Fl(\003)1592 2048
y Fo(\()p Fp(\016)s Fo(\()p Fp(q)s(;)14 b(a)p Fo(\))p
Fp(;)g(x)p Fo(\))2967 1999 y Fw(\(1\))-125 2246 y(for)28
b(all)g Fp(a)37 b Fm(2)f Fo(\006)28 b Fw(and)g Fp(x)37
b Fm(2)g Fo(\006)792 2216 y Fl(\003)830 2246 y Fw(,)28
b(with)h Fp(\017)e Fw(the)i(empty)f(or)g(null)h(string.)f(The)g
(language)g(accepted)e(by)-125 2445 y(automaton)c Fp(M)849
2644 y Fm(L)p Fo(\()p Fp(M)9 b Fo(\))24 b(=)e Fm(f)p
Fp(w)k Fm(2)d Fo(\006)1436 2610 y Fl(\003)1497 2644 y
Fo(:)g Fp(\016)1583 2610 y Fl(\003)1621 2644 y Fo(\()p
Fp(q)1690 2656 y Fn(0)1728 2644 y Fp(;)14 b(w)r Fo(\))24
b Fm(2)f Fp(F)12 b Fm(g)p Fp(;)877 b Fw(\(2\))-125 2872
y(and)21 b(the)g(right)g(language)f(of)h(state)f Fp(q)918
3098 y(~)905 3119 y Fm(L)q Fo(\()p Fp(q)s Fo(\))j(=)g
Fm(f)p Fp(x)g Fm(2)g Fo(\006)1428 3085 y Fl(\003)1489
3119 y Fo(:)h Fp(\016)1576 3085 y Fl(\003)1614 3119 y
Fo(\()p Fp(q)s(;)14 b(x)p Fo(\))24 b Fm(2)f Fp(F)12 b
Fm(g)p Fp(;)933 b Fw(\(3\))-125 3366 y(ar)o(e)20 b(de\002ned)g(as)h(in)
g(\(Daciuk)f(et)h(al.,)f(2000\).)-125 3665 y Ft(2.2)g(Single-string)e
(automaton)-125 3865 y Fw(W)-8 b(e)27 b(\002nd)f(it)h(also)f
(convenient)h(to)g(de\002ne)f(the)g(\(complete\))g Ft(single-string)18
b(automaton)24 b Fw(for)i(string)-125 4064 y Fp(w)r Fw(,)k(denoted)f
Fp(M)399 4076 y Fk(w)491 4064 y Fo(=)38 b(\()p Fp(Q)692
4076 y Fk(w)746 4064 y Fp(;)14 b Fo(\006)p Fp(;)g(\016)917
4076 y Fk(w)970 4064 y Fp(;)g(q)1044 4076 y Fn(0)p Fk(w)1131
4064 y Fp(;)g(F)1221 4076 y Fk(w)1275 4064 y Fo(\))p
Fw(,)29 b(such)h(that)f Fm(L)p Fo(\()p Fp(M)1900 4076
y Fk(w)1954 4064 y Fo(\))38 b(=)h Fm(f)p Fp(w)r Fm(g)p
Fw(.)28 b(This)i(automaton)f(has)-125 4263 y Fp(Q)-59
4275 y Fk(w)18 4263 y Fo(=)23 b(Pr)o(\()p Fp(w)r Fo(\))16
b Fm([)g(f?)514 4275 y Fk(w)567 4263 y Fm(g)p Fw(,)j(wher)o(e)g
Fo(Pr)o(\()p Fp(w)r Fo(\))i Fw(is)g(the)f(set)g(of)g(all)f(pr)o
(e\002xes)g(of)h Fp(w)j Fw(and)c Fm(?)2380 4275 y Fk(w)2454
4263 y Fw(is)h(the)g(absorption)-125 4462 y(state,)g
Fp(F)140 4474 y Fk(w)217 4462 y Fo(=)j Fm(f)p Fp(w)r
Fm(g)p Fw(,)c(and)h Fp(q)688 4474 y Fn(0)p Fk(w)798 4462
y Fo(=)i Fp(\017)e Fw(\(note)g(that)g(non-absorption)h(states)f(in)g
Fp(Q)2280 4474 y Fk(w)2354 4462 y Fw(will)g(be)g(named)g(after)-125
4662 y(the)h(corr)o(esponding)g(pr)o(e\002x)f(of)h Fp(w)r
Fw(\).)g(The)f(next-state)g(function)i(is)f(de\002ned)f(as)h(follows)
860 4909 y Fp(\016)s Fo(\()p Fp(x;)14 b(a)p Fo(\))23
b(=)1203 4792 y Fj(\032)1320 4858 y Fp(xa)97 b Fw(if)23
b Fp(xa)g Fm(2)h Fo(Pr)o(\()p Fp(w)r Fo(\))1307 4958
y Fm(?)1372 4970 y Fk(w)1508 4958 y Fw(otherwise)2056
4909 y Fp(:)888 b Fw(\(4\))-125 5156 y(Note)21 b(that)g(the)g
(single-string)h(automaton)f(for)g(a)f(string)h Fp(w)j
Fw(has)d Fm(j)p Fp(Q)2019 5168 y Fk(w)2072 5156 y Fm(j)i
Fo(=)g Fm(j)p Fp(w)r Fm(j)c Fo(+)f(2)i Fw(states.)3022
5463 y(3)p eop
%%Page: 4 4
4 3 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)-125 158 y Ft(2.3)i(Operations)f
(with)h(\002nite-state)d(automata)-125 357 y(2.3.1)22
b(Intersection)f(automaton)40 b Fw(Given)24 b(two)g(\002nite-state)f
(automata)g Fp(M)2262 369 y Fn(1)2322 357 y Fw(and)g
Fp(M)2567 369 y Fn(2)2603 357 y Fw(,)h(it)f(is)h(easy)f(to)-125
556 y(build)j(an)f(automaton)h Fp(M)35 b Fw(so)26 b(that)f
Fm(L)p Fo(\()p Fp(M)9 b Fo(\))33 b(=)e Fm(L)p Fo(\()p
Fp(M)1537 568 y Fn(1)1575 556 y Fo(\))22 b Fm(\\)g(L)p
Fo(\()p Fp(M)1876 568 y Fn(2)1913 556 y Fo(\))p Fw(.)k(This)g(constr)o
(uction)h(is)f(found)g(in)-125 756 y(formal)c(language)f(theory)h
(textbooks)g(\(Hopcr)o(oft)f(and)g(Ullman,)h(1979,)d(p.)i(59\))f(and)i
(is)f(r)o(eferr)o(ed)e(to)-125 955 y(as)29 b Fv(standard)f
Fw(in)i(papers)d(\(Karakostas,)h(V)-5 b(iglas,)30 b(and)e(Lipton,)h
(2000\).)e(The)h(\(complete\))h Ft(intersec-)-125 1154
y(tion)g(automaton)e Fw(has)i Fp(Q)38 b Fo(=)g Fp(Q)919
1166 y Fn(1)980 1154 y Fm(\002)25 b Fp(Q)1136 1166 y
Fn(2)1172 1154 y Fw(,)k Fp(q)1259 1166 y Fn(0)1335 1154
y Fo(=)38 b(\()p Fp(q)1507 1166 y Fn(01)1578 1154 y Fp(;)14
b(q)1652 1166 y Fn(02)1722 1154 y Fo(\))p Fw(,)29 b Fp(F)50
b Fo(=)39 b Fp(F)2064 1166 y Fn(1)2126 1154 y Fm(\002)24
b Fp(F)2268 1166 y Fn(2)2306 1154 y Fw(,)k(and)h Fp(\016)s
Fo(\(\()p Fp(q)2666 1166 y Fn(1)2704 1154 y Fp(;)14 b(q)2778
1166 y Fn(2)2815 1154 y Fo(\))p Fp(;)g(a)p Fo(\))39 b(=)-125
1353 y(\()p Fp(\016)s Fo(\()p Fp(q)16 1365 y Fn(1)54
1353 y Fp(;)14 b(a)p Fo(\))p Fp(;)g(\016)s Fo(\()p Fp(q)313
1365 y Fn(2)351 1353 y Fp(;)g(a)p Fo(\)\))p Fw(.)-125
1658 y Ft(2.3.2)k(Complementary)e(automaton)39 b Fw(Given)20
b(a)e(complete)i(\002nite-state)e(automaton)i Fp(M)9
b Fw(,)18 b(it)h(is)h(easy)-125 1857 y(to)i(build)f(its)g
Ft(complementary)d(automaton)1361 1836 y Fo(\026)1330
1857 y Fp(M)29 b Fw(so)22 b(that)e Fm(L)p Fo(\()1827
1836 y(\026)1795 1857 y Fp(M)10 b Fo(\))23 b(=)g(\006)2089
1827 y Fl(\003)2146 1857 y Fm(\000)18 b(L)p Fo(\()p Fp(M)9
b Fo(\))p Fw(:)21 b(the)g(only)h(change)-125 2056 y(is)e(the)g(set)g
(of)g(\002nal)g(states:)752 2035 y Fo(\026)734 2056 y
Fp(F)35 b Fo(=)22 b Fp(Q)14 b Fm(\000)g Fp(F)32 b Fw(\(Hopcr)o(oft)19
b(and)g(Ullman,)g(1979,)f(p.)h(59\).)f(In)i(particular)-6
b(,)18 b(the)-125 2255 y Ft(complementary)24 b(single-string)h
(automaton)f Fp(M)1512 2267 y Fl(\000)p Fk(w)1644 2255
y Fw(accepting)i Fo(\006)2081 2225 y Fl(\003)2142 2255
y Fm(\000)d(f)p Fp(w)r Fm(g)j Fw(is)h(identical)f(to)h
Fp(M)3010 2267 y Fk(w)-125 2455 y Fw(except)20 b(that)h
Fp(F)350 2467 y Fl(\000)p Fk(w)479 2455 y Fo(=)i Fp(Q)18
b Fm(\000)g(f)p Fp(w)r Fm(g)p Fw(.)-125 2759 y Ft(2.3.3)27
b(Union)h(automaton)39 b Fw(The)29 b(above)f(constr)o(uctions)j(may)e
(be)f(easily)h(combined)g(to)g(obtain)g(a)-125 2958 y(constr)o(uction)f
(to)e(build,)g(fr)o(om)g(two)g(complete)g(automata)f
Fp(M)1885 2970 y Fn(1)1948 2958 y Fw(and)h Fp(M)2196
2970 y Fn(2)2232 2958 y Fw(,)g(the)g(\(complete\))g Ft(union)-125
3158 y(automaton)g Fp(M)37 b Fw(such)28 b(that)g Fm(L)p
Fo(\()p Fp(M)9 b Fo(\))36 b(=)g Fm(L)p Fo(\()p Fp(M)1315
3170 y Fn(1)1353 3158 y Fo(\))24 b Fm([)g(L)p Fo(\()p
Fp(M)1658 3170 y Fn(2)1695 3158 y Fo(\))p Fw(.)k(It)g(suf)o(\002ces)f
(to)h(consider)g(that,)g(for)g(any)-125 3357 y(two)c(languages)e(on)h
Fo(\006)611 3327 y Fl(\003)649 3357 y Fw(,)g Fp(L)750
3369 y Fn(1)806 3357 y Fm([)d Fp(L)938 3369 y Fn(2)1001
3357 y Fo(=)26 b(\006)1152 3327 y Fl(\003)1210 3357 y
Fm(\000)20 b Fo(\(\006)1387 3327 y Fl(\003)1445 3357
y Fm(\000)f Fp(L)1586 3369 y Fn(1)1623 3357 y Fo(\))h
Fm(\\)g Fo(\(\006)1842 3327 y Fl(\003)1900 3357 y Fm(\000)f
Fp(L)2041 3369 y Fn(2)2078 3357 y Fo(\))p Fw(.)k(The)f(r)o(esulting)h
(automaton)-125 3556 y Fp(M)32 b Fw(is)23 b(identical)f(to)h(the)g
(intersection)g(automaton)h(de\002ned)e(above)g(except)g(for)g(the)h
(fact)f(that)g Fp(F)39 b Fo(=)-125 3755 y(\()p Fp(F)-40
3767 y Fn(1)17 3755 y Fm(\002)18 b Fp(Q)166 3767 y Fn(2)203
3755 y Fo(\))g Fm([)h Fo(\()p Fp(Q)425 3767 y Fn(1)481
3755 y Fm(\002)f Fp(F)617 3767 y Fn(2)655 3755 y Fo(\))p
Fw(.)-125 4060 y Ft(3)j(Adding)e(and)h(removing)g(a)g(string)-125
4359 y(3.1)g(Adding)f(a)i(string)-125 4558 y Fw(Given)h(a)f(\(possibly)
g(cyclic\))g(minimal)h(complete)g(\002nite-state)e(automaton)i
Fp(M)9 b Fw(,)20 b(it)i(is)f(easy)g(to)g(build)-125 4757
y(a)i(new)g(complete)h(automaton)f Fp(M)992 4727 y Fl(0)1038
4757 y Fw(accepting)g Fm(L)p Fo(\()p Fp(M)1591 4727 y
Fl(0)1614 4757 y Fo(\))28 b(=)f Fm(L)p Fo(\()p Fp(M)9
b Fo(\))20 b Fm([)h(f)p Fp(w)r Fm(g)i Fw(by)g(applying)g(the)g(union)
-125 4956 y(constr)o(uct)29 b(de\002ned)f(above)f(to)h
Fp(M)37 b Fw(and)27 b(the)h(single-string)h(automaton)f
Fp(M)2321 4968 y Fk(w)2375 4956 y Fw(.)f(The)h(r)o(esulting)g(au-)-125
5156 y(tomaton)f Fp(M)299 5126 y Fl(0)355 5156 y Fo(=)33
b(\()p Fp(Q)551 5126 y Fl(0)574 5156 y Fp(;)14 b Fo(\006)p
Fp(;)g(\016)748 5126 y Fl(0)771 5156 y Fp(;)g(q)848 5126
y Fl(0)845 5176 y Fn(0)882 5156 y Fp(;)g(F)984 5126 y
Fl(0)1007 5156 y Fo(\))p Fw(,)26 b(which)h(may)f(be)g(very)g(easily)g
(minimized)g(\(see)f(below\))h(has)-125 5463 y(4)p eop
%%Page: 5 5
5 4 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)-125
158 y Fw(four)i(kinds)g(of)g(states)g(in)g Fp(Q)757 128
y Fl(0)780 158 y Fw(:)116 411 y Fm(\017)16 b Fw(States)k(of)h(the)g
(form)g Fo(\()p Fp(q)s(;)14 b Fm(?)1013 423 y Fk(w)1066
411 y Fo(\))21 b Fw(with)h Fp(q)k Fm(2)d Fp(Q)18 b Fm(\000)g(f?g)p
Fw(,)i(equivalent)h(to)g(those)174 610 y(non-absorption)h(states)f(of)g
Fp(M)29 b Fw(which)22 b(ar)o(e)d(not)i(r)o(eached)e(by)i(any)g(pr)o
(e\002x)f(of)g Fp(w)r Fw(;)i(they)f(will)174 809 y(be)g(called)f
Ft(intact)f Fw(states)h(because)g(they)h(have)f(the)h(same)g
(transition)g(str)o(uctur)o(e)g(as)f(their)174 1008 y(counterparts)h
(in)g Fp(M)29 b Fw(\(that)21 b(is,)g(if)f Fp(\016)s Fo(\()p
Fp(q)s(;)14 b(a)p Fo(\))24 b(=)e Fp(q)1607 978 y Fl(0)1631
1008 y Fw(,)e(then)h Fp(\016)1896 978 y Fl(0)1920 1008
y Fo(\(\()p Fp(q)s(;)14 b Fm(?)2126 1020 y Fk(w)2179
1008 y Fo(\))p Fp(;)g(a)p Fo(\))24 b(=)f(\()p Fp(q)2508
978 y Fl(0)2531 1008 y Fp(;)14 b Fm(?)2633 1020 y Fk(w)2686
1008 y Fo(\))p Fw(\),)21 b(and)174 1208 y(belong)h(to)f
Fp(F)603 1178 y Fl(0)647 1208 y Fw(if)f Fp(q)27 b Fm(2)c
Fp(F)12 b Fw(.)20 b(As)h(a)f(r)o(esult,)g(they)h(have)g(exactly)f(the)h
(same)f(right)h(languages,)187 1386 y Fp(~)174 1407 y
Fm(L)q Fo(\(\()p Fp(q)s(;)14 b Fm(?)438 1419 y Fk(w)491
1407 y Fo(\)\))24 b(=)680 1386 y Fp(~)667 1407 y Fm(L)p
Fo(\()p Fp(q)s Fo(\))p Fw(,)d(because)f(all)h(of)f(their)h(outgoing)h
(transitions)g(go)g(to)f(other)g(intact)174 1606 y(states;)g
(furthermor)o(e,)e(each)i(state)f Fo(\()p Fp(q)s(;)14
b Fm(?)1464 1618 y Fk(w)1517 1606 y Fo(\))21 b Fw(has)g(a)g(dif)o(fer)o
(ent)d(right)j(language;)g(ther)o(efor)o(e,)174 1805
y(no)h(two)f(intact)g(states)f(will)i(ever)e(be)g(mer)o(ged)g(into)i
(one)f(by)g(minimization)h(\(intact)e(states)174 2005
y(may)h(however)g(be)f(eliminated,)h(if)f(they)h(become)g(unr)o
(eachable,)e(as)i(we)f(will)i(describe)174 2204 y(below\).)f(For)g(lar)
o(ge)f(automata)g(\(dictionaries\))g Fp(M)9 b Fw(,)20
b(these)h(ar)o(e)e(the)i(gr)o(eat)f(majority)h(of)174
2403 y(states)g(\(the)f(number)h(of)g(intact)g(states)f(ranges)h
(between)f Fm(j)p Fp(Q)p Fm(j)f(\000)f(j)p Fp(w)r Fm(j)h(\000)f
Fo(1)i Fw(and)h Fm(j)p Fp(Q)p Fm(j)p Fw(\);)174 2602
y(ther)o(efor)o(e,)e(it)i(will)h(be)e(convenient)i(in)f(practice)e(to)j
(consider)f Fp(M)2233 2572 y Fl(0)2276 2602 y Fw(as)g(a)f(modi\002ed)h
(version)174 2802 y(of)g Fp(M)29 b Fw(and)21 b(will)g(be)g(tr)o(eated)e
(as)h(such)h(in)g(the)g(algorithms)h(found)f(in)g(this)h(paper)-6
b(.)116 3056 y Fm(\017)16 b Fw(States)k(of)h(the)g(form)g
Fo(\()p Fp(q)s(;)14 b(x)p Fo(\))21 b Fw(with)h Fp(q)k
Fm(2)e Fp(Q)18 b Fm(\000)g(f?g)h Fw(and)h Fp(x)k Fm(2)f
Fo(Pr)o(\()p Fp(w)r Fo(\))p Fw(,)f(such)f(that)174 3255
y Fp(\016)214 3225 y Fl(\003)253 3255 y Fo(\()p Fp(q)322
3267 y Fn(0)359 3255 y Fp(;)14 b(x)p Fo(\))24 b(=)e Fp(q)s
Fw(;)f(they)g(will)h(be)e(called)g Ft(cloned)f Fw(states,)i(inspir)o
(ed)f(by)h(the)g(terminology)h(in)174 3454 y(\(Daciuk)f(et)f(al.,)g
(2000\);)e(the)j(r)o(emaining)g(states)g(in)g Fo(\()p
Fp(Q)d Fm(\000)g(f?g)p Fo(\))g Fm(\002)g Fo(Pr)o(\()p
Fp(w)r Fo(\))k Fw(\227the)f(gr)o(eat)174 3653 y(majority)h(of)f(states)
f(in)h Fp(Q)d Fm(\002)g Fp(Q)1151 3665 y Fk(w)1205 3653
y Fw(\227)j(may)f(safely)h(be)f(discar)o(ded)f(because)h(they)h(ar)o(e)
174 3853 y(unr)o(eachable)f(fr)o(om)g(the)h(new)g(start)f(state)h
Fp(q)1571 3823 y Fl(0)1568 3873 y Fn(0)1628 3853 y Fo(=)i(\()p
Fp(q)1785 3865 y Fn(0)1822 3853 y Fp(;)14 b(\017)p Fo(\))p
Fw(,)21 b(which)g(itself)g(is)g(a)f(cloned)h(state.)174
4052 y(Cloned)g(states)g(ar)o(e)e(modi\002ed)i(versions)h(of)e(the)h
(original)h(states)e Fp(q)26 b Fm(2)e Fp(Q)18 b Fm(\000)g(f?g)p
Fw(:)h(all)h(of)174 4251 y(their)h(outgoing)i(transitions)e(point)h(to)
f(the)g(corr)o(esponding)g(intact)g(states)f(in)h Fp(Q)2741
4221 y Fl(0)2764 4251 y Fw(,)g(that)g(is,)174 4450 y
Fo(\()p Fp(\016)s Fo(\()p Fp(q)s(;)14 b(a)p Fo(\))p Fp(;)g
Fm(?)533 4462 y Fk(w)587 4450 y Fo(\))p Fw(,)21 b(except)f(for)h(the)f
(transition)i(with)g(symbol)f Fp(a)i Fo(:)h Fp(xa)f Fm(2)g
Fo(Pr)o(\()p Fp(w)r Fo(\))p Fw(,)f(which)g(now)174 4650
y(points)g(to)f(the)g(corr)o(esponding)g(cloned)g(state)f
Fo(\()p Fp(\016)s Fo(\()p Fp(q)s(;)14 b(a)p Fo(\))p Fp(;)g(xa)p
Fo(\))p Fw(,)22 b(that)f(is,)782 4903 y Fp(\016)822 4868
y Fl(0)845 4903 y Fo(\(\()p Fp(q)s(;)14 b(x)p Fo(\))p
Fp(;)g(a)p Fo(\))24 b(=)1290 4786 y Fj(\032)1407 4852
y Fo(\()p Fp(\016)s Fo(\()p Fp(q)s(;)14 b(a)p Fo(\))p
Fp(;)g(xa)p Fo(\))98 b Fw(if)23 b Fp(xa)g Fm(2)h Fo(Pr)o(\()p
Fp(w)r Fo(\))1394 4952 y(\()p Fp(\016)s Fo(\()p Fp(q)s(;)14
b(a)p Fo(\))p Fp(;)g Fm(?)1753 4964 y Fk(w)1807 4952
y Fo(\))83 b Fw(otherwise)2967 4903 y(\(5\))174 5156
y(Cloned)21 b(states)g(ar)o(e)e(in)i Fp(F)980 5126 y
Fl(0)1024 5156 y Fw(if)g(the)g(original)g(states)g(ar)o(e)e(in)i
Fp(F)12 b Fw(;)21 b(in)g(addition,)f(if)h(ther)o(e)f(is)h(a)3022
5463 y(5)p eop
%%Page: 6 6
6 5 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)174 158 y Fw(cloned)j(state)g(of)f
(the)h(form)g Fo(\()p Fp(q)s(;)14 b(w)r Fo(\))p Fw(,)22
b(then)f(it)g(is)g(in)g Fp(F)1800 128 y Fl(0)1824 158
y Fw(.)f(Ther)o(e)g(ar)o(e)f(at)i(most)g Fm(j)p Fp(w)r
Fm(j)e Fo(+)f(1)j Fw(cloned)174 357 y(states.)116 656
y Fm(\017)16 b Fw(States)k(of)h(the)g(form)g Fo(\()p
Fm(?)p Fp(;)14 b(x)p Fo(\))p Fw(,)21 b(with)g Fp(x)j
Fm(2)f Fo(Pr)o(\()p Fp(w)r Fo(\))p Fw(.)f(These)f(states)f(will)i(be)e
(called)g Ft(queue)174 855 y Fw(states;)h(states)f(of)h(this)g(form)g
(appear)e(when)j(the)f(string)g Fp(w)j Fw(is)d(not)g(in)g
Fm(L)p Fo(\()p Fp(M)9 b Fo(\))22 b Fw(\(the)174 1054
y(pertinent)f(case,)f(because)g(we)h(ar)o(e)e(adding)h(it\))h(and)f
(only)i(if)f(in)g(the)g(original)g(automaton)174 1254
y Fp(\016)214 1224 y Fl(\003)253 1254 y Fo(\()p Fp(q)322
1266 y Fn(0)359 1254 y Fp(;)14 b(x)p Fo(\))24 b(=)p Fm(?)c
Fw(for)g(some)i Fp(x)h Fm(2)h Fo(Pr)o(\()p Fp(w)r Fo(\))p
Fw(.)d(Only)h(the)f(\002nal)g(queue)g(state)f Fo(\()p
Fm(?)p Fp(;)14 b(w)r Fo(\))22 b Fw(\227if)e(it)174 1453
y(exists\227)h(is)g(in)h Fp(F)721 1423 y Fl(0)744 1453
y Fw(.)e(Ther)o(e)g(ar)o(e)g(at)g(most)i Fm(j)p Fp(w)r
Fm(j)f Fw(queue)g(states.)116 1752 y Fm(\017)16 b Fw(The)21
b(new)g(absorption)g(state)g Fm(?)1185 1722 y Fl(0)1208
1752 y Fo(=)h(\()p Fm(?)p Fp(;)14 b Fm(?)1494 1764 y
Fk(w)1547 1752 y Fo(\))24 b Fm(62)f Fp(F)12 b Fw(.)-125
2059 y(This)30 b(automaton)g(has)f(to)h(be)e(minimized;)i(however)-6
b(,)29 b(due)f(to)i(the)f(natur)o(e)f(of)i(the)f(constr)o(uction)-125
2258 y(algorithm,)i(minimization)g(may)e(be)h(accomplished)g(in)g(a)f
(small)h(number)g(of)g(operations.)f(It)h(is)-125 2457
y(not)23 b(dif)o(\002cult)e(to)i(show)g(that)f(minimization)h(may)f(be)
f(performed)g(by)h(initializing)h(a)e(list)i Fp(R)f Fw(called)-125
2657 y(the)30 b Ft(register)f Fw(\(Daciuk)g(et)g(al.,)g(2000\))e(with)k
(all)e(of)h(the)f(intact)h(states)f(and)g(then)h(testing,)g(one)g(by)
-125 2856 y(one,)25 b(queue)f(and)f(cloned)h(states)g(\(starting)g
(with)g(the)g(last)g(queue)g(state)g Fo(\()p Fm(?)p Fp(;)14
b(w)r Fo(\))24 b Fw(or)-6 b(,)24 b(if)g(it)g(does)g(not)-125
3055 y(exist,)i(the)g(last)g(clone)g(state)g Fo(\()p
Fp(q)s(;)14 b(w)r Fo(\))p Fw(,)27 b(and)e(descending)h(in)h(Pr)o
Fo(\()p Fp(w)r Fo(\))p Fw(\))g(against)f(states)g(in)g(the)g(r)o
(egister)-125 3254 y(and)i(adding)f(them)h(to)g(the)g(r)o(egister)f(if)
g(they)h(ar)o(e)f(not)h(found)g(to)g(be)f(equivalent)h(to)g(a)f(state)h
(in)g Fp(R)-125 3454 y Fw(\(performing)19 b(this)g(check)g(backwar)o
(ds)d(avoids)j(having)g(to)g(test)f(the)h(equivalence)f(of)h(states)f
(by)h(vis-)-125 3653 y(iting)k(their)e(descendants)f(r)o(ecursively:)h
(see)f(the)i(end)f(of)g(section)h(4.1\).)d(Minimization)j(\(including)
-125 3852 y(the)29 b(elimination)g(of)f(unr)o(eachable)f(states)h(in)h
Fp(M)1469 3822 y Fl(0)1491 3852 y Fw(\))f(appears)f(in)i(section)f(4)g
(as)g(part)f(of)i(the)f(string)-125 4051 y(addition)21
b(and)g(r)o(emoval)f(algorithms.)-125 4359 y Ft(3.2)g(Removing)g(a)g
(string)-125 4558 y Fw(Again,)f(given)f(a)g(\(possibly)i(cyclic\))e
(minimal)h(complete)g(\002nite-state)f(automaton)h Fp(M)9
b Fw(,)18 b(it)h(is)g(easy)f(to)-125 4757 y(build)k(a)g(new)g(complete)
g(automaton)g Fp(M)1204 4727 y Fl(0)1249 4757 y Fw(accepting)f
Fm(L)p Fo(\()p Fp(M)1800 4727 y Fl(0)1824 4757 y Fo(\))k(=)f
Fm(L)p Fo(\()p Fp(M)9 b Fo(\))20 b Fm(\000)f(f)p Fp(w)r
Fm(g)25 b Fo(=)f Fm(L)p Fo(\()p Fp(M)9 b Fo(\))20 b Fm(\\)f
Fo(\(\006)2941 4727 y Fl(\003)2999 4757 y Fm(\000)-125
4956 y(f)p Fp(w)r Fm(g)p Fo(\))27 b Fw(applying)h(the)f(intersection)h
(constr)o(uct)g(de\002ned)e(above)h(to)g Fp(M)36 b Fw(and)26
b Fp(M)2418 4968 y Fl(\000)p Fk(w)2524 4956 y Fw(.)g(The)h(r)o
(esulting)-125 5156 y(automaton)d(has)e(the)h(same)f(sets)h(of)g(r)o
(eachable)d(states)j(in)g Fp(Q)1812 5126 y Fl(0)1857
5156 y Fw(as)f(in)h(the)g(case)f(of)h(adding)f(string)h
Fp(w)r Fw(,)-125 5463 y(6)p eop
%%Page: 7 7
7 6 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)-125
158 y Fw(and,)26 b(ther)o(efor)o(e,)e(the)i(same)g(close-to-minimality)
i(pr)o(operties;)d(however)-6 b(,)26 b(since)g Fp(w)j
Fw(is)d(supposed)-125 357 y(to)f(be)e(in)h Fm(L)p Fo(\()p
Fp(M)9 b Fo(\))p Fw(,)24 b(no)h(queue)f(states)g(will)g(be)g(formed)f
(\(note)h(that,)f(if)h Fp(w)32 b Fm(62)d(L)p Fo(\()p
Fp(M)9 b Fo(\))p Fw(,)24 b(a)f(nonaccepting)-125 556
y(queue)c(with)h(all)f(states)f(eventually)h(equivalent)g(to)g
Fm(?)1611 526 y Fl(0)1634 556 y Fo(=)k(\()p Fm(?)p Fp(;)14
b Fm(?)1921 568 y Fk(w)1974 556 y Fo(\))19 b Fw(may)g(be)f(formed\).)g
(The)h(accept-)-125 756 y(ing)26 b(states)e(in)h Fp(F)411
725 y Fl(0)458 756 y Fw(ar)o(e:)e(intact)i(states)f Fo(\()p
Fp(q)s(;)14 b Fm(?)1250 768 y Fk(w)1303 756 y Fo(\))25
b Fw(and)f(cloned)h(states)f Fo(\()p Fp(q)s(;)14 b(x)p
Fo(\))26 b Fw(with)f Fp(q)33 b Fm(2)d Fp(F)12 b Fw(,)24
b(except)g(for)-125 955 y(state)d Fo(\()p Fp(q)s(;)14
b(w)r Fo(\))p Fw(.)22 b(Minimization)f(may)g(be)f(performed)g
(analogously)h(to)h(the)e(string)i(addition)f(case.)-125
1262 y Ft(4)g(Algorithms)-125 1561 y(4.1)f(Adding)f(a)i(string)-125
1760 y Fw(Figur)o(e)k(3)g(shows)i(the)e(algorithm)h(that)f(may)h(be)f
(used)g(to)g(add)g(a)f(string)i(to)g(an)f(existing)h(automa-)-125
1959 y(ton,)i(which)h(follows)f(the)g(constr)o(uction)h(in)e(section)i
(3.1.)c(The)j(r)o(esulting)f(automaton)h(is)g(viewed)-125
2159 y(as)j(a)g(modi\002cation)h(of)f(the)g(original)h(one:)f(ther)o
(efor)o(e,)e(intact)i(states)g(ar)o(e)e(not)j(cr)o(eated;)d(instead,)
-125 2358 y(unr)o(eachable)20 b(intact)h(states)f(ar)o(e)g(eliminated)h
(later)-6 b(.)19 b(The)i(r)o(egister)f Fp(R)i Fw(of)f(states)f(not)i
(needing)f(mini-)-125 2557 y(mization)h(is)f(initialized)f(with)i
Fp(Q)p Fw(.)e(The)h(algorithm)g(has)g(thr)o(ee)f(parts:)116
2864 y Fm(\017)c Fw(First,)21 b(the)g(cloned)g(and)f(queue)h(states)g
(ar)o(e)e(built)i(and)g(added)e(to)i Fp(Q)f Fw(by)h(using)h(function)
174 3064 y Fo(clone\(\))f Fw(for)g(all)f(pr)o(e\002xes)g(of)h
Fp(w)r Fw(.)g(The)g(function)g(r)o(eturns)f(a)h(cloned)g(state)f
(\(with)h(all)174 3263 y(transitions)h(cr)o(eated\))d(if)h(the)h(ar)o
(gument)f(is)h(a)g(nonabsorption)h(state)e(in)i Fp(Q)c
Fm(\000)g(f?g)h Fw(or)i(a)174 3462 y(queue)g(state)g(if)f(it)h
(operates)f(on)i(the)f(absorption)g(state)f Fm(?2)j Fp(Q)p
Fw(.)116 3761 y Fm(\017)16 b Fw(Second,)k(those)i(intact)f(states)f
(that)h(have)f(become)h(unr)o(eachable)e(as)i(a)f(r)o(esult)g(of)174
3960 y(assigning)i(the)f(cloned)g(state)f Fp(q)1177 3930
y Fl(0)1174 3981 y Fn(0)1233 3960 y Fw(as)g(the)h(new)g(start)f(state)h
(ar)o(e)e(r)o(emoved)h(fr)o(om)g Fp(Q)h Fw(and)f Fp(R)174
4159 y Fw(and)h(the)g(start)f(state)g(is)h(r)o(eplaced)e(by)i(its)g
(clone.)g(Unr)o(eachable)e(states)h(ar)o(e)g(simply)h(those)174
4359 y(having)g(no)h(incoming)g(transitions)g(as)f(constr)o(ucted)g(by)
g(the)f(algorithm)i(or)f(as)f(a)174 4558 y(consequence)i(of)f(the)f(r)o
(emoval)h(of)f(other)h(unr)o(eachable)f(states;)g(ther)o(efor)o(e,)f
(function)174 4757 y Fo(unreac)n(hable)o(\(\))i Fw(simply)h(has)f(to)g
(check)f(for)h(the)g(absence)f(of)h(incoming)h(transitions.)174
4956 y(Note)f(that)g(only)h(intact)e(states)h Fo(\()p
Fp(q)s(;)14 b Fm(?)1352 4968 y Fk(w)1406 4956 y Fo(\))21
b Fw(corr)o(esponding)f(to)i Fp(q)h Fw(such)f(that)e
Fp(\016)2563 4926 y Fl(\003)2602 4956 y Fo(\()p Fp(q)2671
4968 y Fn(0)2708 4956 y Fp(;)14 b(x)p Fo(\))24 b(=)e
Fp(q)174 5156 y Fw(for)e(some)h Fp(x)j Fm(2)f Fo(Pr)o(\()p
Fp(w)r Fo(\))f Fw(may)e(become)g(unr)o(eachable)f(as)g(a)h(r)o(esult)g
(of)g(having)h(been)f(cloned.)3022 5463 y(7)p eop
%%Page: 8 8
8 7 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)116 158 y Fm(\017)e
Fw(thir)o(d,)k(the)h(queue)g(and)g(cloned)f(states)h(ar)o(e)e(checked)i
(\(starting)f(with)i(the)f(last)f(state\))174 357 y(against)h(the)g(r)o
(egister)f(using)i(function)f Fo(replace)p 1705 357 25
4 v 29 w(or)p 1809 357 V 29 w(register)n(\(\))p Fw(,)g(which)h(is)f
(essentially)g(the)174 556 y(same)g(as)f(the)h(non-r)o(ecursive)f
(version)i(in)f(Algorithm)h(2)e(in)h(\(Daciuk)f(et)h(al.,)f(2000\),)e
(and)174 756 y(is)j(shown)i(in)e(\002gur)o(e)f(1.)g(If)h(the)f(ar)o
(gument)h(state)f Fp(q)k Fw(is)d(found)g(to)g(be)f(equivalent)h(to)g(a)
g(state)174 955 y Fp(p)g Fw(in)g(the)g(r)o(egister)f
Fp(R)q Fw(,)g(function)i Fo(merge)o(\()p Fp(p;)14 b(q)s
Fo(\))21 b Fw(is)g(called)f(to)h(r)o(edir)o(ect)e(into)i
Fp(p)g Fw(those)174 1154 y(transitions)h(coming)g(into)g
Fp(q)s Fw(;)e(if)h(not,)g(it)g(is)g(simply)h(added)d(to)i(the)g(r)o
(egister)-6 b(.)20 b(Equivalence)174 1353 y(is)h(checked)g(by)g
(function)g Fo(equiv)q(\(\))p Fw(,)g(shown)h(in)f(\002g.)g(2\),)f
(which)i(checks)f(for)f(the)174 1553 y(equivalence)g(of)g(states)g(by)h
(comparing)f(\(i\))g(whether)g(both)h(states)f(ar)o(e)f(accepting)h(or)
g(not,)174 1752 y(and)h(\(ii\))f(whether)h(the)g(corr)o(esponding)g
(outgoing)h(transitions)g(lead)e(to)h(the)g(same)g(state)174
1951 y(in)h Fp(R)q Fw(.)e(Note)h(that)f(outgoing)j(transitions)f
(cannot)f(lead)f(to)h(equivalent)g(states)f(as)h(ther)o(e)174
2150 y(ar)o(e)f(no)h(pairs)f(of)h(dif)o(fer)o(ent)e(equivalent)i
(states)f(in)i(the)e(r)o(egister)174 2350 y(\()p Fm(8)p
Fp(p;)14 b(q)25 b Fm(2)e Fp(R)q(;)14 b Fo(equiv)q(\()p
Fp(p;)g(q)s Fo(\))23 b Fm(\))g Fp(p)g Fo(=)g Fp(q)s Fw(\))d(and)g
(backwar)o(ds)g(minimization)i(guarantees)e(that)174
2549 y(the)h(state)g(has)f(no)i(transitions)g(to)f(non-r)o(egister)f
(states.)-125 2931 y(Finally)-9 b(,)24 b(the)g(new)g(\(minimal\))f
(automaton)h(is)g(r)o(eturned.)e(In)i(r)o(eal)e(implementations,)j
(absorption)-125 3130 y(states)g(ar)o(e)f(not)i(explicitly)g(stor)o
(ed;)e(this)i(r)o(esults)f(in)h(small)f(dif)o(fer)o(ences)e(in)j(the)f
(implementations)-125 3329 y(of)c(the)g(functions)h Fo(clone)o(\(\))g
Fw(and)e Fo(equiv)q(\(\))p Fw(.)-125 3661 y Ft(4.2)g(Removing)g(a)g
(string)-125 3861 y Fw(The)25 b(algorithm)h(for)f(r)o(emoving)g(a)f
(string)i(fr)o(om)e(the)h(language)f(accepted)g(by)h(an)f(automaton)i
Fp(M)3041 3830 y Fl(0)-125 4060 y Fw(only)c(dif)o(fers)d(fr)o(om)i(the)
g(pr)o(evious)f(algorithm)i(in)f(that)g(the)f(line)1175
4408 y Fp(F)35 b Fm( )23 b Fp(F)31 b Fm(\000)18 b(f)p
Fp(q)1615 4420 y Fn(last)1722 4408 y Fm(g)-125 4757 y
Fw(has)25 b(to)h(be)e(added)f(after)h(the)h(\002rst)g(end)p
1139 4757 V 30 w(for)o(.)g(Since)f(the)h(string)h(r)o(emoval)e
(algorithm)i(will)f(usually)-125 4956 y(be)e(asked)g(to)g(r)o(emove)f
(a)h(string)h(which)g(was)f(in)g Fm(L)p Fo(\()p Fp(M)9
b Fo(\))p Fw(,)23 b(function)h Fo(clone\(\))f Fw(will)h(usually)f
(generate)-125 5156 y(only)f(cloned)f(states)g(and)f(no)h(queue)g
(states)g(\(see)f(section)h(3.2)f(for)h(the)f(special)h(case)f
Fp(w)26 b Fm(62)d Fp(L)p Fo(\()p Fp(M)9 b Fo(\))p Fw(\).)-125
5463 y(8)p eop
%%Page: 9 9
9 8 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)-125
158 y Ft(5)i(Examples)-125 457 y(5.1)f(Adding)f(a)i(string)-125
656 y Fw(Assume)h(we)g(want)g(to)g(add)f(the)h(string)g
Fi(bra)f Fw(to)h(the)g(automaton)g(in)g(\002g.)g(4,)f(which)i(accepts)e
(the)g(set)-125 855 y(of)f(strings)g Fo(\()p Fi(ba)p
Fo(\))388 825 y Fn(+)456 855 y Fm([)13 b(f)p Fi(bar)n
Fm(g)19 b Fw(\(in)g(all)g(automata,)g(the)g(absorption)h(state)e(and)h
(all)g(transitions)i(leading)-125 1054 y(to)i(it)g(will)f(not)h(be)f
(drawn)g(for)g(clarity\).)f(The)i(single-string)g(automaton)g(for)f
(string)h Fi(bra)e Fw(is)h(shown)-125 1254 y(in)h(\002g)g(5.)e
(Application)h(of)g(the)g(\002rst)h(stages)f(of)g(the)g(string)h
(addition)f(algorithm)h(leads)e(to)i(the)f(\(un-)-125
1453 y(minimized\))c(automaton)h(in)f(\002g.)g(6.)f(The)h(automaton)g
(has,)g(in)g(addition)g(to)g(the)g(set)g(of)g(intact)g(states)-125
1652 y Fm(f)p Fo(\(0)p Fp(;)c Fm(?)93 1664 y Fk(w)146
1652 y Fo(\))p Fp(;)g(:)g(:)g(:)g(;)g Fo(\(5)p Fp(;)g
Fm(?)539 1664 y Fk(w)592 1652 y Fo(\))p Fm(g)p Fw(,)20
b(two)i(cloned)f(states)g(\()p Fo(\(0)p Fp(;)14 b(\017)p
Fo(\))20 b Fw(and)h Fo(\(1)p Fp(;)14 b Fi(b)p Fo(\))p
Fw(\))20 b(and)g(two)i(queue)f(states)g(\()p Fo(\()p
Fm(?)p Fp(;)14 b Fi(br)n Fo(\))-125 1851 y Fw(and)21
b Fo(\()p Fm(?)p Fp(;)14 b Fi(bra)n Fo(\)\))p Fw(.)22
b(As)e(a)h(consequence)g(of)g(the)g(designation)h(of)f
Fo(\(0)p Fp(;)14 b(\017)p Fo(\))20 b Fw(as)h(the)g(new)g(start)g
(state,)f(shad-)-125 2051 y(owed)33 b(states)f Fo(\(0)p
Fp(;)14 b Fm(?)527 2063 y Fk(w)580 2051 y Fo(\))33 b
Fw(and)f Fo(\(1)p Fp(;)14 b Fm(?)994 2063 y Fk(w)1047
2051 y Fo(\))33 b Fw(become)f(unr)o(eachable)f(\(have)h(no)h(incoming)h
(transitions\))-125 2250 y(and)25 b(ar)o(e)f(eliminated)h(pr)o(ecisely)
f(in)i(that)f(or)o(der)f(in)h(the)h(second)f(stage)g(of)g(the)g
(algorithm.)h(The)f(\002-)-125 2449 y(nal)h(stage)f(of)g(the)h
(algorithm)g(puts)f(intact)h(states)f(in)g(the)h(r)o(egister)e(and)h
(tests)h(queue)f(and)g(cloned)-125 2648 y(states)d(for)g(equivalence)g
(with)g(states)g(in)h(the)f(r)o(egister)-6 b(.)20 b(The)i(\002rst)h
(state)e(tested)h(is)g Fo(\()p Fm(?)p Fp(;)14 b Fi(bra)o
Fo(\))p Fw(,)22 b(which)-125 2848 y(is)d(found)f(to)g(be)f(equivalent)h
(to)h Fo(\(3)p Fp(;)14 b Fm(?)1059 2860 y Fk(w)1112 2848
y Fo(\))p Fw(:)k(ther)o(efor)o(e,)d(transitions)k(coming)g(into)g
Fo(\()p Fm(?)p Fp(;)14 b Fi(bra)o Fo(\))k Fw(ar)o(e)e(made)-125
3047 y(to)j(point)f(to)g Fo(\(3)p Fp(;)c Fm(?)444 3059
y Fk(w)497 3047 y Fo(\))p Fw(.)k(Then,)g(states)g Fo(\()p
Fm(?)p Fp(;)c Fi(br)o Fo(\))p Fw(,)j Fo(\(1)p Fp(;)d
Fi(b)p Fo(\))k Fw(and)f Fo(\(0)p Fp(;)d(\017)p Fo(\))k
Fw(ar)o(e)e(tested)h(in)i(or)o(der)-6 b(,)16 b(found)i(to)g(have)-125
3246 y(no)23 b(equivalent)f(in)g(the)g(r)o(egister)-6
b(,)21 b(and)g(added)f(to)i(it.)g(The)g(r)o(esulting)g(minimal)g
(automaton,)g(after)f(a)-125 3445 y(convenient)h(r)o(enumbering)f(of)f
(states,)h(is)g(shown)h(in)f(\002g.)g(7.)-125 3761 y
Ft(5.2)f(Removing)g(a)g(string)-125 3960 y Fw(Now)-8
b(,)32 b(let)e(us)g(consider)h(we)f(want)h(to)g(r)o(emove)e(string)i
Fi(baba)e Fw(fr)o(om)h(the)h(language)f(accepted)e(by)-125
4159 y(the)i(automaton)f(in)h(\002g.)f(7)g(\(the)g(single-string)h
(automaton)f(for)g Fi(baba)f Fw(is)h(shown)i(in)e(\002g.)h(8\).)e(The)
-125 4359 y(automaton)f(r)o(esulting)f(fr)o(om)f(the)i(application)e
(of)h(the)g(initial)h(\(constr)o(uction\))g(stages)e(of)h(the)g(au-)
-125 4558 y(tomaton)d(is)g(shown)g(in)f(\002g.)h(9.)e(Note)h(that)g
(state)f Fo(\(6)p Fp(;)14 b Fi(baba)n Fo(\))23 b Fw(is)f(marked)f(as)h
(nonaccepting)g(because)-125 4757 y(we)c(ar)o(e)f(r)o(emoving)h(a)g
(string.)g(Again,)f(as)h(a)g(consequence)g(of)g(the)g(designation)h(of)
f Fo(\(0)p Fp(;)c(\017)p Fo(\))j Fw(as)h(the)g(new)-125
4956 y(start)23 b(state,)g(shadowed)g(states)g Fo(\(0)p
Fp(;)14 b Fm(?)1086 4968 y Fk(w)1139 4956 y Fo(\))p Fw(,)23
b Fo(\(1)p Fp(;)14 b Fm(?)1391 4968 y Fk(w)1444 4956
y Fo(\))p Fw(,)23 b(and)g Fo(\(2)p Fp(;)14 b Fm(?)1860
4968 y Fk(w)1913 4956 y Fo(\))23 b Fw(become)g(unr)o(eachable)f(\(have)
g(no)-125 5156 y(incoming)27 b(transitions\))f(and)f(ar)o(e)f
(eliminated)h(pr)o(ecisely)g(in)h(that)f(or)o(der)f(in)i(the)f(second)h
(stage)f(of)3022 5463 y(9)p eop
%%Page: 10 10
10 9 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)-125 158 y Fw(the)28
b(algorithm.)g(The)g(last)g(stage)f(of)h(the)f(algorithm)i(puts)f(all)f
(intact)h(states)f(in)h(the)g(r)o(egister)f(and)-125
357 y(checks)k(cloned)g(states)g Fo(\(6)p Fp(;)14 b Fi(baba)n
Fo(\))p Fw(,)31 b Fo(\(4)p Fp(;)14 b Fi(bab)n Fo(\))p
Fw(,)31 b Fo(\(2)p Fp(;)14 b Fi(ba)o Fo(\))p Fw(,)31
b Fo(\(1)p Fp(;)14 b Fi(b)p Fo(\))30 b Fw(and)g Fo(\(0)p
Fp(;)14 b(\017)p Fo(\))31 b Fw(\(no)g(queue)g(states)f(since)-125
556 y Fi(baba)c Fw(is)h(accepted)e(by)i(the)h(automaton)f(in)g(\002g.)h
(7\),)d(and)i(\002nds)g(none)h(of)f(them)g(to)h(be)e(equivalent)-125
756 y(to)i(those)g(in)g(the)f(r)o(egister)-6 b(,)26 b(to)i(which)g
(they)f(ar)o(e)f(added.)g(The)h(r)o(esulting)g(minimal)h(automaton)g
(is)-125 955 y(shown)23 b(in)e(\002gur)o(e)f(10.)-125
1254 y Ft(6)h(Concluding)e(remarks)-125 1553 y Fw(W)-8
b(e)21 b(have)f(derived,)f(fr)o(om)h(basic)g(r)o(esults)g(of)g
(language)g(and)g(automata)g(theory)-9 b(,)20 b(a)g(simple)h(method)
-125 1752 y(to)30 b(modify)f(a)f(minimal)i(\(possibly)g(cyclic\))e
(\002nite-state)h(automaton)g(so)h(that)f(it)g(r)o(ecognizes)f(one)-125
1951 y(mor)o(e)22 b(string)g(or)g(one)g(string)g(less,)f(while)i
(keeping)e(the)h(\002nite-state)f(automaton)h(minimal.)h(These)-125
2150 y(two)29 b(operations)g(may)g(be)f(applied)f(to)i(dictionary)f
(constr)o(uction)i(and)e(maintenance)h(and)f(gen-)-125
2350 y(eralize)g(the)h(r)o(esult)f(in)h(Daciuk)g(et)f(al.'s)h(\(2000\))
d(second)i(algorithm)i(\(incr)o(emental)e(constr)o(uction)-125
2549 y(of)c(acyclic)f(\002nite-state)h(automata)f(fr)o(om)g(unsorted)h
(strings\))g(in)g(two)g(r)o(espects,)f(with)h(inter)o(esting)-125
2748 y(practical)c(implications:)116 3023 y Fm(\017)c
Fw(The)21 b(method)g(described)f(her)o(e)g(allows)h(for)g(the)g
(addition)f(of)h(strings)h(to)f(the)g(languages)174 3223
y(of)g(cyclic)g(automata)f(\(in)h(practice,)e(it)i(may)g(be)f
(convenient)i(to)f(have)f(cycles)h(in)174 3422 y(dictionaries)g(if)g
(we)f(want)h(them)h(to)f(accept,)e(for)i(example,)e(all)i(possible)g
(integer)174 3621 y(numbers)g(or)g(internet)g(addr)o(esses\).)e(In)i
(this)g(r)o(espect,)f(the)h(algorithm)g(pr)o(esented)f(also)174
3820 y(generalizes)g(the)h(string)h(r)o(emoval)e(method)h(sketched)f
(by)h(Revuz)g(\(2000\))d(for)i(acyclic)174 4020 y(automata.)116
4283 y Fm(\017)c Fw(Removal)22 b(of)e(strings)i(is)f(as)g(easy)f(as)g
(addition.)h(This)g(means)g(that,)g(for)f(example,)g(the)174
4482 y(detection)h(of)g(an)f(err)o(oneous)h(entry)g(in)g(the)g
(dictionary)g(does)g(not)g(imply)h(having)f(to)174 4681
y(r)o(ebuild)f(it)h(completely)-9 b(.)-125 4956 y(The)31
b(asymptotic)f(time)h(complexity)f(of)g(the)g(algorithms)i(is)e(in)h
(the)f(same)g(class)g(\()p Fp(O)r Fo(\()p Fm(j)p Fp(Q)p
Fm(jj)p Fp(w)r Fm(j)p Fo(\))p Fw(\))h(as)-125 5156 y(that)c(in)g
(\(Daciuk)f(et)g(al.,)f(2000\).)f(This)j(is)g(because)e(the)i(slowest)g
(part)e(of)i(the)f(algorithm)h(\(the)g(last)-125 5463
y(10)p eop
%%Page: 11 11
11 10 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)-125
158 y Fw(one\))25 b(checks)f(all)g(queue)g(and)g(cloned)g(states)g(\()p
Fp(O)r Fo(\()p Fm(j)p Fp(w)r Fm(j)p Fo(\))p Fw(\))i(against)e(all)g
(states)g(the)g(r)o(egister)g(\()p Fp(O)r Fo(\()p Fm(j)p
Fp(Q)p Fm(j)p Fo(\))p Fw(\).)-125 357 y(As)g(suggested)f(by)h(one)g(of)
f(the)h(r)o(efer)o(ees,)c(an)k(impr)o(ovement)f(in)h(ef)o(\002ciency)f
(may)g(be)g(obtained)g(by)-125 556 y(r)o(ealizing)32
b(that,)g(in)g(many)h(cases,)e(cloned)h(states)g(corr)o(esponding)h(to)
f(the)g(shortest)h(pr)o(e\002xes)f(of)-125 756 y(string)22
b Fp(w)i Fw(ar)o(e)c(not)i(af)o(fected)d(by)i(minimization)i(because)d
(their)i(intact)f(equivalents)h(have)f(become)-125 955
y(unr)o(eachable)32 b(and)g(ther)o(efor)o(e)f(have)h(been)g(r)o(emoved)
g(fr)o(om)g(the)h(r)o(egister;)f(the)h(solution)h(lies)f(in)-125
1154 y(identifying)d(these)g(states)f(and)g(not)h(cloning)h(them)e
(\(for)g(example,)f(Daciuk)i(et)f(al's)g(\(2000\))e(and)-125
1353 y(Revuz's)21 b(\(2000\))d(algorithms)k(do)f(not)g(clone)h(them\).)
25 1553 y(As)j(for)h(the)f(futur)o(e,)g(we)g(ar)o(e)f(working)j(on)f
(an)g(adaptation)f(of)g(this)h(algorithm)h(to)f(the)g(main-)-125
1752 y(tenance)g(of)f(morphological)i(analysers)f(and)f(generators)g
(using)i(\002nite-state)e(nondeterministic)-125 1951
y(letter)c(transducers)f(\(Roche)h(and)f(Schabes,)g(1997;)f(Garrido)h
(et)h(al.,)e(1999\).)-125 2117 y Fh(Acknowledgments)-125
2300 y Fq(This)g(work)f(has)h(been)g(funded)f(by)h(the)g(Spanish)h
(Comisi)8 b(\264)-33 b(on)17 b(Interministerial)i(de)f(Ciencia)h(y)f(T)
-7 b(ecnolog)n(\264)-23 b(\021a)-125 2466 y(thr)o(ough)19
b(grant)g(TIC2000-1599.)i(W)-7 b(e)18 b(thank)i(the)g(two)f(r)o(efer)o
(ees)d(for)h(their)i(suggestions)e(and)i(Pr)o(of.)f(Colin)g(de)-125
2632 y(la)h(Higuera)f(\(Univ)-8 b(.)19 b(Jean)g(Monnet,)g(St.)g
(Etienne,)f(France\))h(for)f(his)g(comments)h(on)g(the)g(manuscript.)
-125 2914 y Fh(References)-125 3116 y Fq(Daciuk,)g(Jan,)g(Stoyan)g
(Mihov)-8 b(,)18 b(Br)o(uce)g(W)-7 b(.)19 b(W)-7 b(atson,)18
b(and)i(Richar)o(d)e(E.)g(W)-7 b(atson.)27 b(2000.)h(Incr)o(emental)-50
3282 y(constr)o(uction)20 b(of)e(minimal)h(acyclic)g(\002nite-state)g
(automata.)28 b Fg(Computational)19 b(Linguistics)p Fq(,)e
(26\(1\):3\22616.)-125 3460 y(Garrido,)g(Alicia,)i(Amaia)g(Iturraspe,)f
(Sandra)h(Montserrat,)f(Herm)n(\264)-23 b(\021nia)19
b(Pastor)-6 b(,)19 b(and)g(Mikel)e(L.)h(For)o(cada.)-50
3626 y(1999.)28 b(A)19 b(compiler)e(for)h(morphological)f(analysers)h
(and)h(generators)f(based)g(on)h(\002nite-state)-50 3792
y(transducers.)26 b Fg(Pr)o(ocesamiento)19 b(del)f(Lenguaje)g(Natural)p
Fq(,)g(\(25\):93\22698.)-125 3970 y(Hopcr)o(oft,)g(John)h(E.)f(and)i
(Jef)o(fr)o(ey)c(D.)i(Ullman.)27 b(1979.)h Fg(Intr)o(oduction)18
b(to)g(automata)h(theory)m(,)h(languages,)e(and)-50 4136
y(computation)p Fq(.)27 b(Addison\226W)-7 b(esley)f(,)16
b(Reading,)i(MA.)-125 4314 y(Karakostas,)h(Geor)o(ge,)d(Anastasios)j(V)
l(iglas,)e(and)j(Richar)o(d)e(J.)g(Lipton.)27 b(2000.)h(On)18
b(the)i(complexity)d(of)-50 4480 y(intersecting)i(\002nite)g(state)g
(automata.)28 b(In)20 b Fg(Pr)o(oceedings)e(of)h(the)g(15th)h(Annual)d
(IEEE)g(Confer)o(ence)h(on)-50 4646 y(Computational)g(Complexity)i
(\(CoCo'00\))p Fq(.)-125 4824 y(Revuz,)f(Dominique.)26
b(2000.)i(Dynamic)19 b(acyclic)f(minimal)h(automaton.)28
b(In)20 b Fg(Pr)o(epr)o(oceedings)f(of)f(CIAA)h(2000,)-50
4990 y(Fifth)f(International)f(Confer)o(ence)h(on)h(Implementation)f
(and)g(Application)h(of)g(Automata)p Fq(,)f(pages)g(226\226232,)-50
5156 y(London,)g(Canada,)i(July)e(24\22625.)2985 5463
y Fw(1)-5 b(1)p eop
%%Page: 12 12
12 11 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)-125 158 y(Roche,)h(Emmanuel)g(and)
g(Y)-7 b(ves)18 b(Schabes.)28 b(1997.)g(Intr)o(oduction.)f(In)19
b(Emmanuel)g(Roche)g(and)g(Y)-7 b(ves)18 b(Schabes,)-50
324 y(editors,)f Fg(Finite-State)g(Language)h(Pr)o(ocessing)p
Fq(.)g(MIT)h(Pr)o(ess,)e(Cambridge,)g(Mass.,)g(pages)h(1\22665.)-125
5463 y Fw(12)p eop
%%Page: 13 13
13 12 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)-125
179 y Fw(function)j Ft(replace)p 483 179 25 4 v 28 w(or)p
589 179 V 30 w(register)p Fo(\()p Fp(q)s Fo(\))183 329
y Fw(if)f Fm(9)p Fp(p)i Fm(2)g Fp(R)h Fo(:)f(equiv)q(\()p
Fp(p;)14 b(q)s Fo(\))21 b Fw(then)256 478 y(mer)o(ge)p
Fo(\()p Fp(p;)14 b(q)s Fo(\))183 628 y Fw(else)256 777
y Fp(R)24 b Fm( )f Fp(R)c Fm([)g(f)p Fp(q)s Fm(g)183
927 y Fw(end)p 327 927 V 30 w(if)-125 1076 y(end)p 19
1076 V 30 w(function)-125 1284 y Fh(Figure)f(1)-125 1408
y Fq(The)h(function)h Ff(replace)p 553 1408 23 4 v 28
w(or)p 649 1408 V 27 w(register)q(\(\))2980 5463 y Fw(13)p
eop
%%Page: 14 14
14 13 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)-125 179 y Fw(function)k
Ft(equiv)p Fo(\()p Fp(p;)14 b(q)s Fo(\))183 329 y Fw(if)21
b Fo(\()p Fp(p)i Fm(2)g Fp(F)31 b Fm(^)18 b Fp(q)27 b
Fm(62)c Fp(F)12 b Fo(\))19 b Fm(_)f Fo(\()p Fp(p)24 b
Fm(62)f Fp(F)30 b Fm(^)19 b Fp(q)26 b Fm(2)e Fp(F)12
b Fo(\))21 b Fw(r)o(eturn)f(false)183 478 y(for)h(all)f(symbols)i
Fp(a)h Fm(2)h Fo(\006)310 628 y Fw(if)c Fp(\016)s Fo(\()p
Fp(p;)14 b(a)p Fo(\))24 b Fm(6)p Fo(=)e Fp(\016)s Fo(\()p
Fp(q)s(;)14 b(a)p Fo(\))21 b Fw(r)o(eturn)f(false)183
777 y(end)p 327 777 25 4 v 30 w(for)183 927 y(r)o(eturn)g(tr)o(ue)-125
1076 y(end)p 19 1076 V 30 w(function)-125 1284 y Fh(Figure)e(2)-125
1408 y Fq(The)h(function)h Ff(equiv\()p Fe(p;)13 b(q)s
Ff(\))-125 5463 y Fw(14)p eop
%%Page: 15 15
15 14 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)-125
179 y Fw(algorithm)j Ft(addstring)-13 329 y(Input:)e
Fp(M)32 b Fo(=)22 b(\()p Fp(Q;)14 b Fo(\006)p Fp(;)g(\016)o(;)g(q)783
341 y Fn(0)820 329 y Fp(;)g(F)e Fo(\))20 b Fw(\(minimal,)h(complete\),)
g Fp(w)26 b Fm(2)d Fo(\006)1981 299 y Fl(\003)-13 478
y Ft(Output:)c Fp(M)395 448 y Fl(0)441 478 y Fo(=)k(\()p
Fp(Q)627 448 y Fl(0)650 478 y Fp(;)14 b Fo(\006)p Fp(;)g(\016)824
448 y Fl(0)847 478 y Fp(;)g(q)924 448 y Fl(0)921 499
y Fn(0)959 478 y Fp(;)g(F)1061 448 y Fl(0)1084 478 y
Fo(\))41 b Fw(minimal,)22 b(complete,)f(and)f(such)h(that)42
b Fm(L)p Fo(\()p Fp(M)2603 448 y Fl(0)2626 478 y Fo(\))23
b(=)g Fm(L)p Fo(\()p Fp(M)9 b Fo(\))19 b Fm([)g(f)p Fp(w)r
Fm(g)-13 628 y Fp(R)24 b Fm( )f Fp(Q)e Fw([initialize)f(r)o(egister])
-13 777 y Fp(q)27 747 y Fl(0)24 798 y Fn(0)85 777 y Fm( )j
Fo(clone)o(\()p Fp(q)444 789 y Fn(0)482 777 y Fo(\))e
Fw([clone)g(start)f(state])-13 927 y Fp(q)24 939 y Fn(last)156
927 y Fm( )j Fp(q)302 896 y Fl(0)299 947 y Fn(0)-13 1076
y Fw(for)e Fp(i)h Fo(=)h(1)g(to)g Fm(j)p Fp(w)r Fm(j)114
1225 y Fp(q)j Fm( )d Fo(clone)o(\()p Fp(\016)539 1195
y Fl(\003)578 1225 y Fo(\()p Fp(q)647 1237 y Fn(0)685
1225 y Fp(;)14 b(w)781 1237 y Fn(1)832 1225 y Fm(\001)g(\001)g(\001)g
Fp(w)1002 1237 y Fk(i)1030 1225 y Fo(\)\))21 b Fw([cr)o(eate)e(cloned)i
(and)f(queue)h(states;)1115 1375 y(add)f(clones)h(of)g(accepting)f
(states)h(to)g Fp(F)12 b Fw(])114 1524 y Fp(\016)s Fo(\()p
Fp(q)223 1536 y Fn(last)331 1524 y Fp(;)i(w)427 1536
y Fk(i)455 1524 y Fo(\))24 b Fm( )f Fp(q)114 1674 y(q)151
1686 y Fn(last)282 1674 y Fm( )g Fp(q)-13 1823 y Fw(end)p
131 1823 25 4 v 30 w(for)-13 1973 y Fp(i)g Fm( )g Fo(1)-13
2122 y Fp(q)24 2134 y Fn(curren)n(t)260 2122 y Fm( )g
Fp(q)403 2134 y Fn(0)-13 2271 y Fw(while)p Fo(\()p Fp(i)h
Fm(\024)f(j)p Fp(w)r Fm(j)g Fo(and)g(unreac)n(hable)o(\()p
Fp(q)1153 2283 y Fn(curren)n(t)1366 2271 y Fo(\)\))114
2421 y Fp(q)151 2433 y Fn(next)305 2421 y Fm( )g Fp(\016)s
Fo(\()p Fp(q)520 2433 y Fn(curren)n(t)733 2421 y Fp(;)14
b(w)829 2433 y Fk(i)857 2421 y Fo(\))114 2570 y Fp(Q)23
b Fm( )g Fp(Q)18 b Fm(\000)g(f)p Fp(q)555 2582 y Fn(curren)n(t)767
2570 y Fm(g)i Fw([r)o(emove)g(unr)o(eachable)f(state)h(fr)o(om)h
Fp(Q)829 2720 y Fw(and)f(update)g(transitions)i(in)f
Fp(\016)s Fw(])114 2869 y Fp(R)j Fm( )f Fp(R)c Fm(\000)f(f)p
Fp(q)551 2881 y Fn(curren)n(t)763 2869 y Fm(g)i Fw([r)o(emove)g(also)h
(fr)o(om)f(r)o(egister])114 3019 y Fp(q)151 3031 y Fn(curren)n(t)387
3019 y Fm( )j Fp(q)530 3031 y Fn(next)114 3168 y Fp(i)f
Fm( )i Fp(i)18 b Fo(+)g(1)-13 3318 y Fw(end)p 131 3318
V 30 w(while)-13 3467 y(if)j Fo(unreac)n(hable)n(\()p
Fp(q)560 3479 y Fn(curren)n(t)773 3467 y Fo(\))114 3616
y Fp(Q)i Fm( )g Fp(Q)18 b Fm(\000)g(f)p Fp(q)555 3628
y Fn(curren)n(t)767 3616 y Fm(g)114 3766 y Fp(R)24 b
Fm( )f Fp(R)c Fm(\000)f(f)p Fp(q)551 3778 y Fn(curren)n(t)763
3766 y Fm(g)-13 3915 y Fw(end)p 131 3915 V 30 w(if)-13
4065 y Fp(q)24 4077 y Fn(0)85 4065 y Fm( )23 b Fp(q)231
4035 y Fl(0)228 4085 y Fn(0)286 4065 y Fw([r)o(eplace)18
b(start)j(state])-13 4214 y(for)g Fp(i)h Fo(=)h Fm(j)p
Fp(w)r Fm(j)h Fo(do)n(wn)n(to)e(1)114 4364 y(replace)p
374 4364 V 29 w(or)p 478 4364 V 29 w(register)n(\()p
Fp(\016)842 4334 y Fl(\003)880 4364 y Fo(\()p Fp(q)949
4376 y Fn(0)987 4364 y Fp(;)14 b(w)1083 4376 y Fn(1)1134
4364 y Fm(\001)g(\001)g(\001)g Fp(w)1304 4376 y Fk(i)1332
4364 y Fo(\)\))22 b Fw([check)e(queue)h(and)f(cloned)h(states)g(one)g
(by)g(one])-13 4513 y(end)p 131 4513 V 30 w(for)-13 4663
y(r)o(eturn)f Fp(M)32 b Fo(=)23 b(\()p Fp(Q;)14 b Fo(\006)p
Fp(;)g(\016)o(;)g(q)780 4675 y Fn(0)816 4663 y Fp(;)g(F)e
Fo(\))-125 4812 y Fw(end)p 19 4812 V 30 w(algorithm)-125
5020 y Fh(Figure)18 b(3)-125 5144 y Fq(Algorithm)g(to)h(add)g(a)g
(string)f Fe(w)i Fq(to)f(the)h(language)e(accepted)h(by)g(a)g
(\002nite-state)g(automaton)h(while)f(keeping)-125 5269
y(it)g(minimal.)2980 5463 y Fw(15)p eop
%%Page: 16 16
16 15 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)219 1075 y @beginspecial
50 @llx 500 @lly 550 @urx 700 @ury 3000 @rwi @setspecial
%%BeginDocument: carrasco-01-ex1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 50 500 550 700

% Don't forget to adjust the boundingbox!

%%%%%%%% START OF HEADER %%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                             %
%   Automaton transition diagram              %
%                                             %
%   (c) P. Kleiweg  1996, 1998                %
%                                             %
%   Manual available at:                      %
%   http://www.let.rug.nl/~kleiweg/automata/  %
%                                             %
%   Low resolution version                    %
%                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Small changes by MLF: 2001.11.14, as noted  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/petersFSA 256 dict  def
petersFSA begin

/NodeR  20 def			% Radius for node circle
/ENodeR NodeR 0.8 mul def	% Radius for inner circle of final node
/LoopR  NodeR 4   mul def	% Radius for loop arc
/LoopW	30 def			% Width for loop arc (degrees)
/NodeW   2 def			% Linewidth for node circle
/ENodeW  1 def			% Linewidth for inner circle of final node
/LineW   2 def			% Linewidth for arcs

/Color true def			% Should we use fill colors?

% /Myfont (Times-Roman) def    % My font
% /Myfont (Helvetica-Medium) def    % My font
 /Myfont (Helvetica-Bold) def    % My font
% /Myfont (Courier-Bold) def    % My font

%%%% FONTS %%%%

/TopSkip    4 def		% Extra white space above text
/BottomSkip 2 def               % Extra white space below text
/SideSkip   3 def               % Extra white space aside of text

/SuperRaise  5 def		% Vertical position for superscript text
/SubLower   -4 def		% Vertical position for subscript text

% Stack in:  NewFontName EncodingVector OldFontName
% Stack out:
/RE {
  findfont
  dup maxlength dict begin
  {
    1 index /FID ne { def } { pop pop } ifelse
  } forall
  /Encoding exch def
  dup /FontName exch def
  currentdict end definefont pop
} bind def

% /Times-Roman-ISOLatin1 ISOLatin1Encoding /Times-Roman RE
%MLF change with font parametrized
/Myfont-ISOLatin1 ISOLatin1Encoding Myfont RE

% Switch to regular font
% Stack in:
% Stack out:
/NormalFont {
%MLF
  /Myfont-ISOLatin1 findfont
%  /Times-Roman-ISOLatin1 findfont
%  14 scalefont
%MLF: I like my font a little bit larger (15% larger)
   16 scalefont
  setfont
} bind def

% Switch to font used for superscript and subscript
% Stack in:
% Stack out:
/SmallFont {
  /Myfont-ISOLatin1 findfont
%MLF  /Times-Roman-ISOLatin1 findfont
%MLF  10 scalefont
%I like my font a little bit bigger (15%)
  11 scalefont
  setfont
} bind def

% Switch to symbol font
% Stack in:
% Stack out:
/SymbolFont {
  /Symbol findfont
  14 scalefont
  setfont
} bind def

% Calculate height of normal font
gsave
  newpath
  NormalFont
  0 0 moveto
  (\() false charpath
  pathbbox
grestore
/TOP exch def		% height above baseline
pop
/BOTTOM exch def	% depth below baseline (negative number)
pop

%%%% DISPLAYING TEXT %%%%

% Positions for displaying text relative to currentpoint
/Centre	0 def
/North	1 def
/East	2 def
/South	4 def
/West	8 def
/NorthEast North East or def
/NorthWest North West or def
/SouthEast South East or def
/SouthWest South West or def

% Text types
/Rm    1 def	% Use normal text (Roman)
/Super 2 def	% Use superscript
/Sub   3 def	% Use subscript
/Sym   4 def    % Use symbol font
/Ovl   5 def    % Use overlined normal text

% Calculate width of text in pixels
% Stack in:  [ (text1) type1 (text2) type2 ... ] 
% Stack out: width
/textwidth {
  /Txt exch def
  /L 0 def
  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq P Ovl eq or {
      /L L NormalFont T stringwidth pop add def
    } if
    P Super eq P Sub eq or {
      /L L SmallFont T stringwidth pop add def
    } if
    P Sym eq {
      /L L SymbolFont T stringwidth pop add def
    } if
  } for
  L
} bind def

% Display text at currentpoint
% Stack in:  [ (text1) type1 (text2) type2 ... ] position
% Stack out:
/puttext {
  /Pos exch def        % Centre, North, NorthEast, etc
  /Txt exch def

  /Width Txt textwidth def

  Pos West and 0 ne {
    Width neg SideSkip sub 0 rmoveto
  } {
    Pos East and 0 ne {
      SideSkip 0 rmoveto
    } {
      Width 2 div neg 0 rmoveto
    } ifelse
  } ifelse

  Pos North and 0 ne {
    0 BOTTOM neg BottomSkip add rmoveto
  } {
    Pos South and 0 ne {
      0 TOP neg TopSkip sub rmoveto
    } {
      0 TOP BOTTOM add 2 div neg rmoveto
    } ifelse
  } ifelse

  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq {
      NormalFont T show
    } if
    P Super eq {
      0 SuperRaise rmoveto
      SmallFont T show
      0 SuperRaise neg rmoveto
    } if
    P Sub eq {
      0 SubLower rmoveto
      SmallFont T show
      0 SubLower neg rmoveto
    } if
    P Sym eq {
      SymbolFont T show
    } if
    P Ovl eq {
      NormalFont
      gsave
        .5 setlinewidth
        0.6 T maxheight 2 add rmoveto
        T stringwidth pop 2 sub 0 rlineto stroke
      grestore
      T show
    } if
  } for
} bind def

% stack in:  (text)
% stack out: height
/maxheight {
  /MHT exch def
  /MHH 0 def
  0 1 MHT length 1 sub {
    MHT exch 1 getinterval
    gsave
      newpath
      0 0 moveto
      false charpath
      pathbbox
      dup MHH gt {
        /MHH exch def
      } {
        pop
      } ifelse
      pop pop pop
    grestore
  } for
  MHH
} bind def

%%%% DRAWING NODES %%%%

% Draw a node
% Stack in:  [ x y ] red green blue
% Stack out:
/node {
  4 -1 roll
  aload pop
  /Y exch def
  /X exch def

  NodeW setlinewidth
  X NodeR add Y moveto
  X Y NodeR 0 360 arc
  Color {
    gsave
      setrgbcolor
      fill
    grestore
  } {
    pop pop pop
  } ifelse
  stroke
} bind def

% Make node initial
% Stack in:   [ x y ] angle
% Stack uit:
/initialnode {
  gsave
    exch
    aload pop
    translate
    rotate
    NodeR NodeW 2 div add 0 translate
    /N NodeR 3 div def
    0 0 moveto
    N N neg lineto
    N 2 div 0 N 2 div 0 N N curveto
    closepath
    fill
  grestore
} bind def    

% Make node final
% Stack in:   [ x y ]
% Stack out:
/finalnode {
  aload pop
  /Y exch def
  /X exch def
  ENodeW setlinewidth
  X ENodeR add Y moveto
  X Y ENodeR 0 360 arc
  stroke
} bind def

%%%% DRAWING TRANSITIONS %%%%

% Draw arrowhead at x2 y2 from direction x1 y1
% Stack in:  x1 y1 x2 y2
% Stack out:
/arrowHead {
  /AY2 exch def
  /AX2 exch def
  /AY1 exch def
  /AX1 exch def
  gsave
    AX2 AY2 translate
    AY2 AY1 sub AX2 AX1 sub atan rotate
    0 0 moveto
    LineW neg 2 div 0 translate
    -8 LineW mul 2 LineW mul lineto
    -6 LineW mul 0
    -6 LineW mul 0
    -8 LineW mul -2 LineW mul curveto
    closepath
    fill
  grestore
} bind def

% Draw a transition
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part arrow1 arrow2
% Stack out:
/transition {
  /Arrow2 exch def	% Arrow to final node: true / false
  /Arrow1 exch def	% Arrow ot starting node: true / false
  /F exch def		% Position for label (value between 0 and 1)
  /A exch def		% Angle (value between -120 and 120 exclusive for non-loops)
  aload pop
  /Y2 exch def		% Final node
  /X2 exch def		%
  aload pop
  /Y1 exch def		% Starting node
  /X1 exch def		%

  /Clear LineW 4 mul def
  LineW setlinewidth
  X1 X2 eq Y1 Y2 eq and {
    Arrow1 {
      /XX0 A LoopW add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A LoopW add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A LoopW add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A LoopW add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A LoopW add cos NodeR mul X1 add def
      /YY0 A LoopW add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3 A LoopW sub cos NodeR NodeW 2 div add mul X1 add def
      /YY3 A LoopW sub sin NodeR NodeW 2 div add mul Y1 add def
      /XX3i A LoopW sub cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY3i A LoopW sub sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX3 A LoopW sub cos NodeR mul X1 add def
      /YY3 A LoopW sub sin NodeR mul Y1 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /XX1 A LoopW add cos LoopR mul X1 add def
    /YY1 A LoopW add sin LoopR mul Y1 add def
    /XX2 A LoopW sub cos LoopR mul X1 add def
    /YY2 A LoopW sub sin LoopR mul Y1 add def
  } {
    /ALFA Y2 Y1 sub X2 X1 sub atan def
    Arrow1 {
      /XX0 A ALFA add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A ALFA add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A ALFA add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A ALFA add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A ALFA add cos NodeR mul X1 add def
      /YY0 A ALFA add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3  ALFA 180 add A sub cos NodeR NodeW 2 div add mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR NodeW 2 div add mul Y2 add def
      /XX3i ALFA 180 add A sub cos NodeR NodeW 2 div add Clear add mul X2 add def
      /YY3i ALFA 180 add A sub sin NodeR NodeW 2 div add Clear add mul Y2 add def
    } {
      /XX3  ALFA 180 add A sub cos NodeR mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR mul Y2 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /LEN
      XX0 XX3 sub dup mul YY0 YY3 sub dup mul add sqrt
      1 2 A cos mul add
      div
    def
    /XX1 XX0 LEN ALFA A add cos mul add def
    /YY1 YY0 LEN ALFA A add sin mul add def
    /XX2 XX3 LEN ALFA 180 add A sub cos mul add def
    /YY2 YY3 LEN ALFA 180 add A sub sin mul add def
  } ifelse

  XX0i YY0i moveto
  XX1 YY1 XX2 YY2 XX3i YY3i curveto
  stroke

  /Cx XX1 XX0i sub 3 mul def
  /Cy YY1 YY0i sub 3 mul def
  /Bx XX2 XX1 sub 3 mul Cx sub def
  /By YY2 YY1 sub 3 mul Cy sub def
  /Ax XX3i XX0i sub Cx sub Bx sub def
  /Ay YY3i YY0i sub Cy sub By sub def

  /XL F F F mul mul Ax mul F F mul Bx mul add F Cx mul add XX0i add def
  /YL F F F mul mul Ay mul F F mul By mul add F Cy mul add YY0i add def

  Arrow1 {
      XX1 YY1 XX0 YY0 arrowHead
  } if
  Arrow2 {
      XX2 YY2 XX3 YY3 arrowHead
  } if

  XL YL moveto
} bind def

% Draw a transition with arrow to final node
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part
% Stack out:
/trans {
  false true transition
} bind def

%%%% MISC %%%%

 % Stack in:  [ x y ]
% Stack out:
% Result:    x y moveto
/amoveto {
  aload pop
  moveto
} bind def

end

%%%%%%%% END OF HEADER %%%%%%%%

petersFSA begin

% Define locations for nodes
% Don't use capital letters in names
/q0 [ 100 600 ] def
/q1 [ 200 600 ] def
/q2 [ 300 600 ] def
/q3 [ 400 650 ] def
/q4 [ 400 550 ] def
/q5 [ 500 550 ] def

% Draw nodes, using supplied red/green/blue fill color
% [ q0 q1 q2 q3 q4 q5 ] { .9 .9 .9 node } forall (all light grey)
[ q0 q1 q2 q3 q4 q5 ] { 1 1 1 node } forall (all white)
% q0 1 0.8 0 node % orange
% q2 0 1 1 node

% Make this node initial
q0 135 initialnode
% q2 90 initialnode (two nodes may be initial)

% Make this node final
[ q2 q3 q5 ] {finalnode} forall
% q2 finalnode

% Put labels in nodes
% q0 amoveto [ (0,) Rm (e) Sym ] Centre puttext
q0 amoveto [ (0) Rm ] Centre puttext
q1 amoveto [ (1) Rm ] Centre puttext
q2 amoveto [ (2) Rm ] Centre puttext
q3 amoveto [ (3) Rm ] Centre puttext
q4 amoveto [ (4) Rm ] Centre puttext
q5 amoveto [ (5) Rm ] Centre puttext

%q1 amoveto [ (q) Rm (1) Sub ] Centre puttext
%q2 amoveto [ (q) Rm (2) Sub ] Centre puttext
%q3 amoveto [ (q) Rm (3) Sub ] Centre puttext
%q4 amoveto [ (q) Rm (4) Sub ] Centre puttext

% Draw transitions...			...and put labels with them
q0 q1   0 .5  trans                     [ (b) Rm ] North puttext
q1 q2   0 .5  trans                     [ (a) Rm ] North puttext
q2 q3   0 .5  trans                     [ (r) Rm ] NorthWest puttext
q2 q4   0 .5  trans                     [ (b) Rm ] NorthEast puttext
q4 q5  30 .5  trans                     [ (a) Rm ] North puttext
q5 q4  30 .5  trans                     [ (b) Rm ] South puttext



%
%
%q0 q1  20 .5  trans			[ (It's ) Rm (Super) Super ] NorthWest puttext
%q1 q0  20 .5  trans			[ (b) Rm ] SouthEast puttext
%q1 q2   0 .5  trans			gsave
%					  0 11 rmoveto [ (Symbol:) Rm ] NorthEast puttext
%					grestore
%					[ (Symbol) Sym ] NorthEast puttext
%q2 q2   0 .5  trans			[ (b) Rm ] East puttext
%q3 q1 -60 .25 trans			[ (over) Ovl (lined) Rm ] East puttext
%q4 q3  20 .5  trans			[ (\306\330\305\320\336) Rm ] North puttext
%q3 q4  20 .5  trans			[ (\346\370\345\360\376) Rm ] South puttext
%q0 q2   0 .5  true  true  transition	[ (Both) Rm ] North     puttext
%q0 q4   0 .5  false false transition	[ (None) Rm ] SouthWest puttext
%q3 q3 270 .5  true  true  transition	[ (Both) Rm ] South puttext
%q4 q4 270 .5  false false transition	[ (None) Rm ] South puttext

end

showpage

%%EOF

%%EndDocument
 @endspecial -125 1282 a Fh(Figure)g(4)-125 1407 y Fq(Minimal)h
(automaton)h(accepting)f(the)h(set)e(of)h(strings)e Ff(\()p
Fd(ba)p Ff(\))1587 1375 y Fc(+)1655 1407 y Fb([)g(f)p
Fd(bar)r Fb(g)p Fq(.)-125 5463 y Fw(16)p eop
%%Page: 17 17
17 16 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)469
575 y @beginspecial 50 @llx 550 @lly 450 @urx 650 @ury
2400 @rwi @setspecial
%%BeginDocument: carrasco-01-bra.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 50 550 450 650

% Don't forget to adjust the boundingbox!

%%%%%%%% START OF HEADER %%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                             %
%   Automaton transition diagram              %
%                                             %
%   (c) P. Kleiweg  1996, 1998                %
%                                             %
%   Manual available at:                      %
%   http://www.let.rug.nl/~kleiweg/automata/  %
%                                             %
%   Low resolution version                    %
%                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Small changes by MLF: 2001.11.14, as noted  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/petersFSA 256 dict  def
petersFSA begin

/NodeR  20 def			% Radius for node circle
/ENodeR NodeR 0.8 mul def	% Radius for inner circle of final node
/LoopR  NodeR 4   mul def	% Radius for loop arc
/LoopW	30 def			% Width for loop arc (degrees)
/NodeW   2 def			% Linewidth for node circle
/ENodeW  1 def			% Linewidth for inner circle of final node
/LineW   2 def			% Linewidth for arcs

/Color true def			% Should we use fill colors?

% /Myfont (Times-Roman) def    % My font
% /Myfont (Helvetica-Medium) def    % My font
 /Myfont (Helvetica-Bold) def    % My font
% /Myfont (Courier-Bold) def    % My font

%%%% FONTS %%%%

/TopSkip    4 def		% Extra white space above text
/BottomSkip 2 def               % Extra white space below text
/SideSkip   3 def               % Extra white space aside of text

/SuperRaise  5 def		% Vertical position for superscript text
/SubLower   -4 def		% Vertical position for subscript text

% Stack in:  NewFontName EncodingVector OldFontName
% Stack out:
/RE {
  findfont
  dup maxlength dict begin
  {
    1 index /FID ne { def } { pop pop } ifelse
  } forall
  /Encoding exch def
  dup /FontName exch def
  currentdict end definefont pop
} bind def

% /Times-Roman-ISOLatin1 ISOLatin1Encoding /Times-Roman RE
%MLF change with font parametrized
/Myfont-ISOLatin1 ISOLatin1Encoding Myfont RE

% Switch to regular font
% Stack in:
% Stack out:
/NormalFont {
%MLF
  /Myfont-ISOLatin1 findfont
%  /Times-Roman-ISOLatin1 findfont
%  14 scalefont
%MLF: I like my font a little bit larger (15% larger)
   16 scalefont
  setfont
} bind def

% Switch to font used for superscript and subscript
% Stack in:
% Stack out:
/SmallFont {
  /Myfont-ISOLatin1 findfont
%MLF  /Times-Roman-ISOLatin1 findfont
%MLF  10 scalefont
%I like my font a little bit bigger (15%)
  11 scalefont
  setfont
} bind def

% Switch to symbol font
% Stack in:
% Stack out:
/SymbolFont {
  /Symbol findfont
  14 scalefont
  setfont
} bind def

% Calculate height of normal font
gsave
  newpath
  NormalFont
  0 0 moveto
  (\() false charpath
  pathbbox
grestore
/TOP exch def		% height above baseline
pop
/BOTTOM exch def	% depth below baseline (negative number)
pop

%%%% DISPLAYING TEXT %%%%

% Positions for displaying text relative to currentpoint
/Centre	0 def
/North	1 def
/East	2 def
/South	4 def
/West	8 def
/NorthEast North East or def
/NorthWest North West or def
/SouthEast South East or def
/SouthWest South West or def

% Text types
/Rm    1 def	% Use normal text (Roman)
/Super 2 def	% Use superscript
/Sub   3 def	% Use subscript
/Sym   4 def    % Use symbol font
/Ovl   5 def    % Use overlined normal text

% Calculate width of text in pixels
% Stack in:  [ (text1) type1 (text2) type2 ... ] 
% Stack out: width
/textwidth {
  /Txt exch def
  /L 0 def
  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq P Ovl eq or {
      /L L NormalFont T stringwidth pop add def
    } if
    P Super eq P Sub eq or {
      /L L SmallFont T stringwidth pop add def
    } if
    P Sym eq {
      /L L SymbolFont T stringwidth pop add def
    } if
  } for
  L
} bind def

% Display text at currentpoint
% Stack in:  [ (text1) type1 (text2) type2 ... ] position
% Stack out:
/puttext {
  /Pos exch def        % Centre, North, NorthEast, etc
  /Txt exch def

  /Width Txt textwidth def

  Pos West and 0 ne {
    Width neg SideSkip sub 0 rmoveto
  } {
    Pos East and 0 ne {
      SideSkip 0 rmoveto
    } {
      Width 2 div neg 0 rmoveto
    } ifelse
  } ifelse

  Pos North and 0 ne {
    0 BOTTOM neg BottomSkip add rmoveto
  } {
    Pos South and 0 ne {
      0 TOP neg TopSkip sub rmoveto
    } {
      0 TOP BOTTOM add 2 div neg rmoveto
    } ifelse
  } ifelse

  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq {
      NormalFont T show
    } if
    P Super eq {
      0 SuperRaise rmoveto
      SmallFont T show
      0 SuperRaise neg rmoveto
    } if
    P Sub eq {
      0 SubLower rmoveto
      SmallFont T show
      0 SubLower neg rmoveto
    } if
    P Sym eq {
      SymbolFont T show
    } if
    P Ovl eq {
      NormalFont
      gsave
        .5 setlinewidth
        0.6 T maxheight 2 add rmoveto
        T stringwidth pop 2 sub 0 rlineto stroke
      grestore
      T show
    } if
  } for
} bind def

% stack in:  (text)
% stack out: height
/maxheight {
  /MHT exch def
  /MHH 0 def
  0 1 MHT length 1 sub {
    MHT exch 1 getinterval
    gsave
      newpath
      0 0 moveto
      false charpath
      pathbbox
      dup MHH gt {
        /MHH exch def
      } {
        pop
      } ifelse
      pop pop pop
    grestore
  } for
  MHH
} bind def

%%%% DRAWING NODES %%%%

% Draw a node
% Stack in:  [ x y ] red green blue
% Stack out:
/node {
  4 -1 roll
  aload pop
  /Y exch def
  /X exch def

  NodeW setlinewidth
  X NodeR add Y moveto
  X Y NodeR 0 360 arc
  Color {
    gsave
      setrgbcolor
      fill
    grestore
  } {
    pop pop pop
  } ifelse
  stroke
} bind def

% Make node initial
% Stack in:   [ x y ] angle
% Stack uit:
/initialnode {
  gsave
    exch
    aload pop
    translate
    rotate
    NodeR NodeW 2 div add 0 translate
    /N NodeR 3 div def
    0 0 moveto
    N N neg lineto
    N 2 div 0 N 2 div 0 N N curveto
    closepath
    fill
  grestore
} bind def    

% Make node final
% Stack in:   [ x y ]
% Stack out:
/finalnode {
  aload pop
  /Y exch def
  /X exch def
  ENodeW setlinewidth
  X ENodeR add Y moveto
  X Y ENodeR 0 360 arc
  stroke
} bind def

%%%% DRAWING TRANSITIONS %%%%

% Draw arrowhead at x2 y2 from direction x1 y1
% Stack in:  x1 y1 x2 y2
% Stack out:
/arrowHead {
  /AY2 exch def
  /AX2 exch def
  /AY1 exch def
  /AX1 exch def
  gsave
    AX2 AY2 translate
    AY2 AY1 sub AX2 AX1 sub atan rotate
    0 0 moveto
    LineW neg 2 div 0 translate
    -8 LineW mul 2 LineW mul lineto
    -6 LineW mul 0
    -6 LineW mul 0
    -8 LineW mul -2 LineW mul curveto
    closepath
    fill
  grestore
} bind def

% Draw a transition
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part arrow1 arrow2
% Stack out:
/transition {
  /Arrow2 exch def	% Arrow to final node: true / false
  /Arrow1 exch def	% Arrow ot starting node: true / false
  /F exch def		% Position for label (value between 0 and 1)
  /A exch def		% Angle (value between -120 and 120 exclusive for non-loops)
  aload pop
  /Y2 exch def		% Final node
  /X2 exch def		%
  aload pop
  /Y1 exch def		% Starting node
  /X1 exch def		%

  /Clear LineW 4 mul def
  LineW setlinewidth
  X1 X2 eq Y1 Y2 eq and {
    Arrow1 {
      /XX0 A LoopW add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A LoopW add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A LoopW add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A LoopW add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A LoopW add cos NodeR mul X1 add def
      /YY0 A LoopW add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3 A LoopW sub cos NodeR NodeW 2 div add mul X1 add def
      /YY3 A LoopW sub sin NodeR NodeW 2 div add mul Y1 add def
      /XX3i A LoopW sub cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY3i A LoopW sub sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX3 A LoopW sub cos NodeR mul X1 add def
      /YY3 A LoopW sub sin NodeR mul Y1 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /XX1 A LoopW add cos LoopR mul X1 add def
    /YY1 A LoopW add sin LoopR mul Y1 add def
    /XX2 A LoopW sub cos LoopR mul X1 add def
    /YY2 A LoopW sub sin LoopR mul Y1 add def
  } {
    /ALFA Y2 Y1 sub X2 X1 sub atan def
    Arrow1 {
      /XX0 A ALFA add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A ALFA add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A ALFA add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A ALFA add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A ALFA add cos NodeR mul X1 add def
      /YY0 A ALFA add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3  ALFA 180 add A sub cos NodeR NodeW 2 div add mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR NodeW 2 div add mul Y2 add def
      /XX3i ALFA 180 add A sub cos NodeR NodeW 2 div add Clear add mul X2 add def
      /YY3i ALFA 180 add A sub sin NodeR NodeW 2 div add Clear add mul Y2 add def
    } {
      /XX3  ALFA 180 add A sub cos NodeR mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR mul Y2 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /LEN
      XX0 XX3 sub dup mul YY0 YY3 sub dup mul add sqrt
      1 2 A cos mul add
      div
    def
    /XX1 XX0 LEN ALFA A add cos mul add def
    /YY1 YY0 LEN ALFA A add sin mul add def
    /XX2 XX3 LEN ALFA 180 add A sub cos mul add def
    /YY2 YY3 LEN ALFA 180 add A sub sin mul add def
  } ifelse

  XX0i YY0i moveto
  XX1 YY1 XX2 YY2 XX3i YY3i curveto
  stroke

  /Cx XX1 XX0i sub 3 mul def
  /Cy YY1 YY0i sub 3 mul def
  /Bx XX2 XX1 sub 3 mul Cx sub def
  /By YY2 YY1 sub 3 mul Cy sub def
  /Ax XX3i XX0i sub Cx sub Bx sub def
  /Ay YY3i YY0i sub Cy sub By sub def

  /XL F F F mul mul Ax mul F F mul Bx mul add F Cx mul add XX0i add def
  /YL F F F mul mul Ay mul F F mul By mul add F Cy mul add YY0i add def

  Arrow1 {
      XX1 YY1 XX0 YY0 arrowHead
  } if
  Arrow2 {
      XX2 YY2 XX3 YY3 arrowHead
  } if

  XL YL moveto
} bind def

% Draw a transition with arrow to final node
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part
% Stack out:
/trans {
  false true transition
} bind def

%%%% MISC %%%%

 % Stack in:  [ x y ]
% Stack out:
% Result:    x y moveto
/amoveto {
  aload pop
  moveto
} bind def

end

%%%%%%%% END OF HEADER %%%%%%%%

petersFSA begin

% Define locations for nodes
% Don't use capital letters in names
/q0 [ 100 600 ] def
/q1 [ 200 600 ] def
/q2 [ 300 600 ] def
/q3 [ 400 600 ] def


% Draw nodes, using supplied red/green/blue fill color
% [ q0 q1 q2 q3 q4 q5 q6 ] { .9 .9 .9 node } forall (all light grey)
[ q0 q1 q2 q3 ] { 1 1 1 node } forall (all white)
% q0 1 0.8 0 node % orange
% q2 0 1 1 node

% Make this node initial
q0 180 initialnode
% q2 90 initialnode (two nodes may be initial)

% Make this node final
% [ q2 q6 q5 ] {finalnode} forall
 q3 finalnode

% Put labels in nodes
% q0 amoveto [ (0,) Rm (e) Sym ] Centre puttext
q0 amoveto [ (e) Sym ] Centre puttext
q1 amoveto [ (b) Rm ] Centre puttext
q2 amoveto [ (br) Rm ] Centre puttext
q3 amoveto [ (bra) Rm ] Centre puttext
%q0 amoveto [ (q) Rm (0) Sub ] Centre puttext
%q1 amoveto [ (q) Rm (1) Sub ] Centre puttext
%q2 amoveto [ (q) Rm (2) Sub ] Centre puttext
%q3 amoveto [ (q) Rm (3) Sub ] Centre puttext
%q4 amoveto [ (q) Rm (4) Sub ] Centre puttext

% Draw transitions...			...and put labels with them
q0 q1   0 .5  trans                     [ (b) Rm ] North puttext
q1 q2   0 .5  trans                     [ (r) Rm ] North puttext
q2 q3   0 .5  trans                     [ (a) Rm ] North puttext
% q2 q4   0 .5  trans                     [ (b) Rm ] North puttext
% q2 q5   0 .5  trans                     [ (r) Rm ] NorthEast puttext
% q3 q5   0 .5  trans                     [ (a) Rm ] South puttext
% q4 q6  30 .5  trans                     [ (a) Rm ] North puttext
% q4 q4 120 .5  trans % LOOPS WORK NICE!
% q6 q4  30 .5  trans                     [ (b) Rm ] South puttext


%
%
%q0 q1  20 .5  trans			[ (It's ) Rm (Super) Super ] NorthWest puttext
%q1 q0  20 .5  trans			[ (b) Rm ] SouthEast puttext
%q1 q2   0 .5  trans			gsave
%					  0 11 rmoveto [ (Symbol:) Rm ] NorthEast puttext
%					grestore
%					[ (Symbol) Sym ] NorthEast puttext
%q2 q2   0 .5  trans			[ (b) Rm ] East puttext
%q3 q1 -60 .25 trans			[ (over) Ovl (lined) Rm ] East puttext
%q4 q3  20 .5  trans			[ (\306\330\305\320\336) Rm ] North puttext
%q3 q4  20 .5  trans			[ (\346\370\345\360\376) Rm ] South puttext
%q0 q2   0 .5  true  true  transition	[ (Both) Rm ] North     puttext
%q0 q4   0 .5  false false transition	[ (None) Rm ] SouthWest puttext
%q3 q3 270 .5  true  true  transition	[ (Both) Rm ] South puttext
%q4 q4 270 .5  false false transition	[ (None) Rm ] South puttext

end

showpage

%%EOF

%%EndDocument
 @endspecial -125 782 a Fh(Figure)f(5)-125 907 y Fq(Single-string)g
(automaton)i(accepting)f(string)f Fd(bra)q Fq(.)2980
5463 y Fw(17)p eop
%%Page: 18 18
18 17 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)219 1575 y @beginspecial
50 @llx 400 @lly 550 @urx 700 @ury 3000 @rwi @setspecial
%%BeginDocument: carrasco-01-ex1bra.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 50 400 550 700

% Don't forget to adjust the boundingbox!

%%%%%%%% START OF HEADER %%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                             %
%   Automaton transition diagram              %
%                                             %
%   (c) P. Kleiweg  1996, 1998                %
%                                             %
%   Manual available at:                      %
%   http://www.let.rug.nl/~kleiweg/automata/  %
%                                             %
%   Low resolution version                    %
%                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Small changes by MLF: 2001.11.14, as noted  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/petersFSA 256 dict  def
petersFSA begin

% /NodeR  20 def			% Radius for node circle
/NodeR  25 def			% Radius for node circle
/ENodeR NodeR 0.8 mul def	% Radius for inner circle of final node
/LoopR  NodeR 4   mul def	% Radius for loop arc
/LoopW	30 def			% Width for loop arc (degrees)
/NodeW   2 def			% Linewidth for node circle
/ENodeW  1 def			% Linewidth for inner circle of final node
/LineW   2 def			% Linewidth for arcs

/Color true def			% Should we use fill colors?

% /Myfont (Times-Roman) def    % My font
% /Myfont (Helvetica-Medium) def    % My font
 /Myfont (Helvetica-Bold) def    % My font
% /Myfont (Courier-Bold) def    % My font

%%%% FONTS %%%%

/TopSkip    4 def		% Extra white space above text
/BottomSkip 2 def               % Extra white space below text
/SideSkip   3 def               % Extra white space aside of text

/SuperRaise  5 def		% Vertical position for superscript text
/SubLower   -4 def		% Vertical position for subscript text

% Stack in:  NewFontName EncodingVector OldFontName
% Stack out:
/RE {
  findfont
  dup maxlength dict begin
  {
    1 index /FID ne { def } { pop pop } ifelse
  } forall
  /Encoding exch def
  dup /FontName exch def
  currentdict end definefont pop
} bind def

% /Times-Roman-ISOLatin1 ISOLatin1Encoding /Times-Roman RE
%MLF change with font parametrized
/Myfont-ISOLatin1 ISOLatin1Encoding Myfont RE

% Switch to regular font
% Stack in:
% Stack out:
/NormalFont {
%MLF
  /Myfont-ISOLatin1 findfont
%  /Times-Roman-ISOLatin1 findfont
%  14 scalefont
%MLF: I like my font a little bit larger (15% larger)
   16 scalefont
  setfont
} bind def

% Switch to font used for superscript and subscript
% Stack in:
% Stack out:
/SmallFont {
  /Myfont-ISOLatin1 findfont
%MLF  /Times-Roman-ISOLatin1 findfont
%MLF  10 scalefont
%I like my font a little bit bigger (15%)
  11 scalefont
  setfont
} bind def

% Switch to symbol font
% Stack in:
% Stack out:
/SymbolFont {
%  /Symbol findfont
   /Symbol findfont
%MLF a bit bigger  
% 14 scalefont
  16 scalefont
  setfont
} bind def

% Calculate height of normal font
gsave
  newpath
  NormalFont
  0 0 moveto
  (\() false charpath
  pathbbox
grestore
/TOP exch def		% height above baseline
pop
/BOTTOM exch def	% depth below baseline (negative number)
pop

%%%% DISPLAYING TEXT %%%%

% Positions for displaying text relative to currentpoint
/Centre	0 def
/North	1 def
/East	2 def
/South	4 def
/West	8 def
/NorthEast North East or def
/NorthWest North West or def
/SouthEast South East or def
/SouthWest South West or def

% Text types
/Rm    1 def	% Use normal text (Roman)
/Super 2 def	% Use superscript
/Sub   3 def	% Use subscript
/Sym   4 def    % Use symbol font
/Ovl   5 def    % Use overlined normal text

% Calculate width of text in pixels
% Stack in:  [ (text1) type1 (text2) type2 ... ] 
% Stack out: width
/textwidth {
  /Txt exch def
  /L 0 def
  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq P Ovl eq or {
      /L L NormalFont T stringwidth pop add def
    } if
    P Super eq P Sub eq or {
      /L L SmallFont T stringwidth pop add def
    } if
    P Sym eq {
      /L L SymbolFont T stringwidth pop add def
    } if
  } for
  L
} bind def

% Display text at currentpoint
% Stack in:  [ (text1) type1 (text2) type2 ... ] position
% Stack out:
/puttext {
  /Pos exch def        % Centre, North, NorthEast, etc
  /Txt exch def

  /Width Txt textwidth def

  Pos West and 0 ne {
    Width neg SideSkip sub 0 rmoveto
  } {
    Pos East and 0 ne {
      SideSkip 0 rmoveto
    } {
      Width 2 div neg 0 rmoveto
    } ifelse
  } ifelse

  Pos North and 0 ne {
    0 BOTTOM neg BottomSkip add rmoveto
  } {
    Pos South and 0 ne {
      0 TOP neg TopSkip sub rmoveto
    } {
      0 TOP BOTTOM add 2 div neg rmoveto
    } ifelse
  } ifelse

  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq {
      NormalFont T show
    } if
    P Super eq {
      0 SuperRaise rmoveto
      SmallFont T show
      0 SuperRaise neg rmoveto
    } if
    P Sub eq {
      0 SubLower rmoveto
      SmallFont T show
      0 SubLower neg rmoveto
    } if
    P Sym eq {
      SymbolFont T show
    } if
    P Ovl eq {
      NormalFont
      gsave
        .5 setlinewidth
        0.6 T maxheight 2 add rmoveto
        T stringwidth pop 2 sub 0 rlineto stroke
      grestore
      T show
    } if
  } for
} bind def

% stack in:  (text)
% stack out: height
/maxheight {
  /MHT exch def
  /MHH 0 def
  0 1 MHT length 1 sub {
    MHT exch 1 getinterval
    gsave
      newpath
      0 0 moveto
      false charpath
      pathbbox
      dup MHH gt {
        /MHH exch def
      } {
        pop
      } ifelse
      pop pop pop
    grestore
  } for
  MHH
} bind def

%%%% DRAWING NODES %%%%

% Draw a node
% Stack in:  [ x y ] red green blue
% Stack out:
/node {
  4 -1 roll
  aload pop
  /Y exch def
  /X exch def

  NodeW setlinewidth
  X NodeR add Y moveto
  X Y NodeR 0 360 arc
  Color {
    gsave
      setrgbcolor
      fill
    grestore
  } {
    pop pop pop
  } ifelse
  stroke
} bind def

% Make node initial
% Stack in:   [ x y ] angle
% Stack uit:
/initialnode {
  gsave
    exch
    aload pop
    translate
    rotate
    NodeR NodeW 2 div add 0 translate
    /N NodeR 3 div def
    0 0 moveto
    N N neg lineto
    N 2 div 0 N 2 div 0 N N curveto
    closepath
    fill
  grestore
} bind def    

% Make node final
% Stack in:   [ x y ]
% Stack out:
/finalnode {
  aload pop
  /Y exch def
  /X exch def
  ENodeW setlinewidth
  X ENodeR add Y moveto
  X Y ENodeR 0 360 arc
  stroke
} bind def

%%%% DRAWING TRANSITIONS %%%%

% Draw arrowhead at x2 y2 from direction x1 y1
% Stack in:  x1 y1 x2 y2
% Stack out:
/arrowHead {
  /AY2 exch def
  /AX2 exch def
  /AY1 exch def
  /AX1 exch def
  gsave
    AX2 AY2 translate
    AY2 AY1 sub AX2 AX1 sub atan rotate
    0 0 moveto
    LineW neg 2 div 0 translate
    -8 LineW mul 2 LineW mul lineto
    -6 LineW mul 0
    -6 LineW mul 0
    -8 LineW mul -2 LineW mul curveto
    closepath
    fill
  grestore
} bind def

% Draw a transition
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part arrow1 arrow2
% Stack out:
/transition {
  /Arrow2 exch def	% Arrow to final node: true / false
  /Arrow1 exch def	% Arrow ot starting node: true / false
  /F exch def		% Position for label (value between 0 and 1)
  /A exch def		% Angle (value between -120 and 120 exclusive for non-loops)
  aload pop
  /Y2 exch def		% Final node
  /X2 exch def		%
  aload pop
  /Y1 exch def		% Starting node
  /X1 exch def		%

  /Clear LineW 4 mul def
  LineW setlinewidth
  X1 X2 eq Y1 Y2 eq and {
    Arrow1 {
      /XX0 A LoopW add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A LoopW add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A LoopW add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A LoopW add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A LoopW add cos NodeR mul X1 add def
      /YY0 A LoopW add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3 A LoopW sub cos NodeR NodeW 2 div add mul X1 add def
      /YY3 A LoopW sub sin NodeR NodeW 2 div add mul Y1 add def
      /XX3i A LoopW sub cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY3i A LoopW sub sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX3 A LoopW sub cos NodeR mul X1 add def
      /YY3 A LoopW sub sin NodeR mul Y1 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /XX1 A LoopW add cos LoopR mul X1 add def
    /YY1 A LoopW add sin LoopR mul Y1 add def
    /XX2 A LoopW sub cos LoopR mul X1 add def
    /YY2 A LoopW sub sin LoopR mul Y1 add def
  } {
    /ALFA Y2 Y1 sub X2 X1 sub atan def
    Arrow1 {
      /XX0 A ALFA add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A ALFA add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A ALFA add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A ALFA add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A ALFA add cos NodeR mul X1 add def
      /YY0 A ALFA add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3  ALFA 180 add A sub cos NodeR NodeW 2 div add mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR NodeW 2 div add mul Y2 add def
      /XX3i ALFA 180 add A sub cos NodeR NodeW 2 div add Clear add mul X2 add def
      /YY3i ALFA 180 add A sub sin NodeR NodeW 2 div add Clear add mul Y2 add def
    } {
      /XX3  ALFA 180 add A sub cos NodeR mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR mul Y2 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /LEN
      XX0 XX3 sub dup mul YY0 YY3 sub dup mul add sqrt
      1 2 A cos mul add
      div
    def
    /XX1 XX0 LEN ALFA A add cos mul add def
    /YY1 YY0 LEN ALFA A add sin mul add def
    /XX2 XX3 LEN ALFA 180 add A sub cos mul add def
    /YY2 YY3 LEN ALFA 180 add A sub sin mul add def
  } ifelse

  XX0i YY0i moveto
  XX1 YY1 XX2 YY2 XX3i YY3i curveto
  stroke

  /Cx XX1 XX0i sub 3 mul def
  /Cy YY1 YY0i sub 3 mul def
  /Bx XX2 XX1 sub 3 mul Cx sub def
  /By YY2 YY1 sub 3 mul Cy sub def
  /Ax XX3i XX0i sub Cx sub Bx sub def
  /Ay YY3i YY0i sub Cy sub By sub def

  /XL F F F mul mul Ax mul F F mul Bx mul add F Cx mul add XX0i add def
  /YL F F F mul mul Ay mul F F mul By mul add F Cy mul add YY0i add def

  Arrow1 {
      XX1 YY1 XX0 YY0 arrowHead
  } if
  Arrow2 {
      XX2 YY2 XX3 YY3 arrowHead
  } if

  XL YL moveto
} bind def

% Draw a transition with arrow to final node
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part
% Stack out:
/trans {
  false true transition
} bind def

%%%% MISC %%%%

 % Stack in:  [ x y ]
% Stack out:
% Result:    x y moveto
/amoveto {
  aload pop
  moveto
} bind def

end

%%%%%%%% END OF HEADER %%%%%%%%

petersFSA begin

% Define locations for nodes
% Don't use capital letters in names
/q0 [ 100 600 ] def
/q1 [ 200 600 ] def
/q2 [ 300 600 ] def
/q3 [ 400 650 ] def
/q4 [ 400 550 ] def
/q5 [ 500 550 ] def
/q6 [ 100 500 ] def
/q7 [ 200 500 ] def
/q8 [ 300 450 ] def
/q9 [ 400 450 ] def

% Draw nodes, using supplied red/green/blue fill color
[ q0 q1 ] { .9 .9 .9 node } forall 
[ q2 q3 q4 q5 q6 q7 q8 q9 ] { 1 1 1 node } forall
% q0 1 0.8 0 node % orange
% q2 0 1 1 node

% Make this node initial
q6 180 initialnode
% q2 90 initialnode (two nodes may be initial)

% Make this node final
[ q2 q3 q5 q9 ] { finalnode } forall
% q2 finalnode

% Put labels in nodes
% q0 amoveto [ (0,) Rm (e) Sym ] Centre puttext
q0 amoveto [ (0,) Rm (^) Sym (w) Sub ] Centre puttext
q1 amoveto [ (1,) Rm (^) Sym (w) Sub ] Centre puttext
q2 amoveto [ (2,) Rm (^) Sym (w) Sub ] Centre puttext
q3 amoveto [ (3,) Rm (^) Sym (w) Sub ] Centre puttext
q4 amoveto [ (4,) Rm (^) Sym (w) Sub ] Centre puttext
q5 amoveto [ (5,) Rm (^) Sym (w) Sub ] Centre puttext 
q6 amoveto [ (0,) Rm (e) Sym ] Centre puttext
q7 amoveto [ (1,b) Rm ] Centre puttext
q8 amoveto [ (^) Sym (,br) Rm ] Centre puttext
q9 amoveto [ (^) Sym (,bra) Rm ] Centre puttext


%q1 amoveto [ (q) Rm (1) Sub ] Centre puttext
%q2 amoveto [ (q) Rm (2) Sub ] Centre puttext
%q3 amoveto [ (q) Rm (3) Sub ] Centre puttext
%q4 amoveto [ (q) Rm (4) Sub ] Centre puttext

% Draw transitions...			...and put labels with them
q0 q1   0 .5  trans                     [ (b) Rm ] North puttext
q1 q2   0 .5  trans                     [ (a) Rm ] North puttext
q2 q3   0 .5  trans                     [ (r) Rm ] NorthWest puttext
q2 q4   0 .5  trans                     [ (b) Rm ] NorthEast puttext
q4 q5  30 .5  trans                     [ (a) Rm ] North puttext
q5 q4  30 .5  trans                     [ (b) Rm ] South puttext
q6 q7   0 .5  trans                     [ (b) Rm ] North puttext
q7 q2   0 .5  trans                     [ (a) Rm ] NorthWest puttext
q7 q8   0 .5  trans                     [ (r) Rm ] NorthEast puttext
q8 q9   0 .5  trans                     [ (a) Rm ] North puttext

%
%
%q0 q1  20 .5  trans			[ (It's ) Rm (Super) Super ] NorthWest puttext
%q1 q0  20 .5  trans			[ (b) Rm ] SouthEast puttext
%q1 q2   0 .5  trans			gsave
%					  0 11 rmoveto [ (Symbol:) Rm ] NorthEast puttext
%					grestore
%					[ (Symbol) Sym ] NorthEast puttext
%q2 q2   0 .5  trans			[ (b) Rm ] East puttext
%q3 q1 -60 .25 trans			[ (over) Ovl (lined) Rm ] East puttext
%q4 q3  20 .5  trans			[ (\306\330\305\320\336) Rm ] North puttext
%q3 q4  20 .5  trans			[ (\346\370\345\360\376) Rm ] South puttext
%q0 q2   0 .5  true  true  transition	[ (Both) Rm ] North     puttext
%q0 q4   0 .5  false false transition	[ (None) Rm ] SouthWest puttext
%q3 q3 270 .5  true  true  transition	[ (Both) Rm ] South puttext
%q4 q4 270 .5  false false transition	[ (None) Rm ] South puttext

end

showpage

%%EOF

%%EndDocument
 @endspecial -125 1782 a Fh(Figure)g(6)-125 1907 y Fq(Unminimized)h
(automaton)h(accepting)g(the)f(set)g Ff(\()p Fd(ba)p
Ff(\))1439 1875 y Fc(+)1506 1907 y Fb([)f(f)p Fd(bar)q
Fb(g)f([)h(f)p Fd(bra)q Fb(g)p Fq(.)g(Shadowed)h(states)g
Ff(\(0)p Fe(;)14 b Fb(?)2823 1915 y Fa(w)2871 1907 y
Ff(\))19 b Fq(and)-125 2031 y Ff(\(1)p Fe(;)14 b Fb(?)39
2039 y Fa(w)88 2031 y Ff(\))k Fq(have)i(become)e(unr)o(eachable)i
(\(have)f(no)g(incoming)g(transitions\))f(and)i(ar)o(e)e(eliminated)g
(pr)o(ecisely)e(in)-125 2156 y(that)21 b(or)o(der)-6
b(.)-125 5463 y Fw(18)p eop
%%Page: 19 19
19 18 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)219
1075 y @beginspecial 50 @llx 500 @lly 550 @urx 700 @ury
3000 @rwi @setspecial
%%BeginDocument: carrasco-01-ex2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 50 500 550 700

% Don't forget to adjust the boundingbox!

%%%%%%%% START OF HEADER %%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                             %
%   Automaton transition diagram              %
%                                             %
%   (c) P. Kleiweg  1996, 1998                %
%                                             %
%   Manual available at:                      %
%   http://www.let.rug.nl/~kleiweg/automata/  %
%                                             %
%   Low resolution version                    %
%                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Small changes by MLF: 2001.11.14, as noted  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/petersFSA 256 dict  def
petersFSA begin

/NodeR  20 def			% Radius for node circle
/ENodeR NodeR 0.8 mul def	% Radius for inner circle of final node
/LoopR  NodeR 4   mul def	% Radius for loop arc
/LoopW	30 def			% Width for loop arc (degrees)
/NodeW   2 def			% Linewidth for node circle
/ENodeW  1 def			% Linewidth for inner circle of final node
/LineW   2 def			% Linewidth for arcs

/Color true def			% Should we use fill colors?

% /Myfont (Times-Roman) def    % My font
% /Myfont (Helvetica-Medium) def    % My font
 /Myfont (Helvetica-Bold) def    % My font
% /Myfont (Courier-Bold) def    % My font

%%%% FONTS %%%%

/TopSkip    4 def		% Extra white space above text
/BottomSkip 2 def               % Extra white space below text
/SideSkip   3 def               % Extra white space aside of text

/SuperRaise  5 def		% Vertical position for superscript text
/SubLower   -4 def		% Vertical position for subscript text

% Stack in:  NewFontName EncodingVector OldFontName
% Stack out:
/RE {
  findfont
  dup maxlength dict begin
  {
    1 index /FID ne { def } { pop pop } ifelse
  } forall
  /Encoding exch def
  dup /FontName exch def
  currentdict end definefont pop
} bind def

% /Times-Roman-ISOLatin1 ISOLatin1Encoding /Times-Roman RE
%MLF change with font parametrized
/Myfont-ISOLatin1 ISOLatin1Encoding Myfont RE

% Switch to regular font
% Stack in:
% Stack out:
/NormalFont {
%MLF
  /Myfont-ISOLatin1 findfont
%  /Times-Roman-ISOLatin1 findfont
%  14 scalefont
%MLF: I like my font a little bit larger (15% larger)
   16 scalefont
  setfont
} bind def

% Switch to font used for superscript and subscript
% Stack in:
% Stack out:
/SmallFont {
  /Myfont-ISOLatin1 findfont
%MLF  /Times-Roman-ISOLatin1 findfont
%MLF  10 scalefont
%I like my font a little bit bigger (15%)
  11 scalefont
  setfont
} bind def

% Switch to symbol font
% Stack in:
% Stack out:
/SymbolFont {
  /Symbol findfont
  14 scalefont
  setfont
} bind def

% Calculate height of normal font
gsave
  newpath
  NormalFont
  0 0 moveto
  (\() false charpath
  pathbbox
grestore
/TOP exch def		% height above baseline
pop
/BOTTOM exch def	% depth below baseline (negative number)
pop

%%%% DISPLAYING TEXT %%%%

% Positions for displaying text relative to currentpoint
/Centre	0 def
/North	1 def
/East	2 def
/South	4 def
/West	8 def
/NorthEast North East or def
/NorthWest North West or def
/SouthEast South East or def
/SouthWest South West or def

% Text types
/Rm    1 def	% Use normal text (Roman)
/Super 2 def	% Use superscript
/Sub   3 def	% Use subscript
/Sym   4 def    % Use symbol font
/Ovl   5 def    % Use overlined normal text

% Calculate width of text in pixels
% Stack in:  [ (text1) type1 (text2) type2 ... ] 
% Stack out: width
/textwidth {
  /Txt exch def
  /L 0 def
  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq P Ovl eq or {
      /L L NormalFont T stringwidth pop add def
    } if
    P Super eq P Sub eq or {
      /L L SmallFont T stringwidth pop add def
    } if
    P Sym eq {
      /L L SymbolFont T stringwidth pop add def
    } if
  } for
  L
} bind def

% Display text at currentpoint
% Stack in:  [ (text1) type1 (text2) type2 ... ] position
% Stack out:
/puttext {
  /Pos exch def        % Centre, North, NorthEast, etc
  /Txt exch def

  /Width Txt textwidth def

  Pos West and 0 ne {
    Width neg SideSkip sub 0 rmoveto
  } {
    Pos East and 0 ne {
      SideSkip 0 rmoveto
    } {
      Width 2 div neg 0 rmoveto
    } ifelse
  } ifelse

  Pos North and 0 ne {
    0 BOTTOM neg BottomSkip add rmoveto
  } {
    Pos South and 0 ne {
      0 TOP neg TopSkip sub rmoveto
    } {
      0 TOP BOTTOM add 2 div neg rmoveto
    } ifelse
  } ifelse

  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq {
      NormalFont T show
    } if
    P Super eq {
      0 SuperRaise rmoveto
      SmallFont T show
      0 SuperRaise neg rmoveto
    } if
    P Sub eq {
      0 SubLower rmoveto
      SmallFont T show
      0 SubLower neg rmoveto
    } if
    P Sym eq {
      SymbolFont T show
    } if
    P Ovl eq {
      NormalFont
      gsave
        .5 setlinewidth
        0.6 T maxheight 2 add rmoveto
        T stringwidth pop 2 sub 0 rlineto stroke
      grestore
      T show
    } if
  } for
} bind def

% stack in:  (text)
% stack out: height
/maxheight {
  /MHT exch def
  /MHH 0 def
  0 1 MHT length 1 sub {
    MHT exch 1 getinterval
    gsave
      newpath
      0 0 moveto
      false charpath
      pathbbox
      dup MHH gt {
        /MHH exch def
      } {
        pop
      } ifelse
      pop pop pop
    grestore
  } for
  MHH
} bind def

%%%% DRAWING NODES %%%%

% Draw a node
% Stack in:  [ x y ] red green blue
% Stack out:
/node {
  4 -1 roll
  aload pop
  /Y exch def
  /X exch def

  NodeW setlinewidth
  X NodeR add Y moveto
  X Y NodeR 0 360 arc
  Color {
    gsave
      setrgbcolor
      fill
    grestore
  } {
    pop pop pop
  } ifelse
  stroke
} bind def

% Make node initial
% Stack in:   [ x y ] angle
% Stack uit:
/initialnode {
  gsave
    exch
    aload pop
    translate
    rotate
    NodeR NodeW 2 div add 0 translate
    /N NodeR 3 div def
    0 0 moveto
    N N neg lineto
    N 2 div 0 N 2 div 0 N N curveto
    closepath
    fill
  grestore
} bind def    

% Make node final
% Stack in:   [ x y ]
% Stack out:
/finalnode {
  aload pop
  /Y exch def
  /X exch def
  ENodeW setlinewidth
  X ENodeR add Y moveto
  X Y ENodeR 0 360 arc
  stroke
} bind def

%%%% DRAWING TRANSITIONS %%%%

% Draw arrowhead at x2 y2 from direction x1 y1
% Stack in:  x1 y1 x2 y2
% Stack out:
/arrowHead {
  /AY2 exch def
  /AX2 exch def
  /AY1 exch def
  /AX1 exch def
  gsave
    AX2 AY2 translate
    AY2 AY1 sub AX2 AX1 sub atan rotate
    0 0 moveto
    LineW neg 2 div 0 translate
    -8 LineW mul 2 LineW mul lineto
    -6 LineW mul 0
    -6 LineW mul 0
    -8 LineW mul -2 LineW mul curveto
    closepath
    fill
  grestore
} bind def

% Draw a transition
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part arrow1 arrow2
% Stack out:
/transition {
  /Arrow2 exch def	% Arrow to final node: true / false
  /Arrow1 exch def	% Arrow ot starting node: true / false
  /F exch def		% Position for label (value between 0 and 1)
  /A exch def		% Angle (value between -120 and 120 exclusive for non-loops)
  aload pop
  /Y2 exch def		% Final node
  /X2 exch def		%
  aload pop
  /Y1 exch def		% Starting node
  /X1 exch def		%

  /Clear LineW 4 mul def
  LineW setlinewidth
  X1 X2 eq Y1 Y2 eq and {
    Arrow1 {
      /XX0 A LoopW add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A LoopW add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A LoopW add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A LoopW add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A LoopW add cos NodeR mul X1 add def
      /YY0 A LoopW add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3 A LoopW sub cos NodeR NodeW 2 div add mul X1 add def
      /YY3 A LoopW sub sin NodeR NodeW 2 div add mul Y1 add def
      /XX3i A LoopW sub cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY3i A LoopW sub sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX3 A LoopW sub cos NodeR mul X1 add def
      /YY3 A LoopW sub sin NodeR mul Y1 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /XX1 A LoopW add cos LoopR mul X1 add def
    /YY1 A LoopW add sin LoopR mul Y1 add def
    /XX2 A LoopW sub cos LoopR mul X1 add def
    /YY2 A LoopW sub sin LoopR mul Y1 add def
  } {
    /ALFA Y2 Y1 sub X2 X1 sub atan def
    Arrow1 {
      /XX0 A ALFA add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A ALFA add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A ALFA add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A ALFA add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A ALFA add cos NodeR mul X1 add def
      /YY0 A ALFA add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3  ALFA 180 add A sub cos NodeR NodeW 2 div add mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR NodeW 2 div add mul Y2 add def
      /XX3i ALFA 180 add A sub cos NodeR NodeW 2 div add Clear add mul X2 add def
      /YY3i ALFA 180 add A sub sin NodeR NodeW 2 div add Clear add mul Y2 add def
    } {
      /XX3  ALFA 180 add A sub cos NodeR mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR mul Y2 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /LEN
      XX0 XX3 sub dup mul YY0 YY3 sub dup mul add sqrt
      1 2 A cos mul add
      div
    def
    /XX1 XX0 LEN ALFA A add cos mul add def
    /YY1 YY0 LEN ALFA A add sin mul add def
    /XX2 XX3 LEN ALFA 180 add A sub cos mul add def
    /YY2 YY3 LEN ALFA 180 add A sub sin mul add def
  } ifelse

  XX0i YY0i moveto
  XX1 YY1 XX2 YY2 XX3i YY3i curveto
  stroke

  /Cx XX1 XX0i sub 3 mul def
  /Cy YY1 YY0i sub 3 mul def
  /Bx XX2 XX1 sub 3 mul Cx sub def
  /By YY2 YY1 sub 3 mul Cy sub def
  /Ax XX3i XX0i sub Cx sub Bx sub def
  /Ay YY3i YY0i sub Cy sub By sub def

  /XL F F F mul mul Ax mul F F mul Bx mul add F Cx mul add XX0i add def
  /YL F F F mul mul Ay mul F F mul By mul add F Cy mul add YY0i add def

  Arrow1 {
      XX1 YY1 XX0 YY0 arrowHead
  } if
  Arrow2 {
      XX2 YY2 XX3 YY3 arrowHead
  } if

  XL YL moveto
} bind def

% Draw a transition with arrow to final node
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part
% Stack out:
/trans {
  false true transition
} bind def

%%%% MISC %%%%

 % Stack in:  [ x y ]
% Stack out:
% Result:    x y moveto
/amoveto {
  aload pop
  moveto
} bind def

end

%%%%%%%% END OF HEADER %%%%%%%%

petersFSA begin

% Define locations for nodes
% Don't use capital letters in names
/q0 [ 100 600 ] def
/q1 [ 200 600 ] def
/q2 [ 300 650 ] def
/q3 [ 300 550 ] def
/q4 [ 400 650 ] def
/q5 [ 400 550 ] def
/q6 [ 500 650 ] def

% Draw nodes, using supplied red/green/blue fill color
% [ q0 q1 q2 q3 q4 q5 q6 ] { .9 .9 .9 node } forall (all light grey)
[ q0 q1 q2 q3 q4 q5 q6 ] { 1 1 1 node } forall (all white)
% q0 1 0.8 0 node % orange
% q2 0 1 1 node

% Make this node initial
q0 135 initialnode
% q2 90 initialnode (two nodes may be initial)

% Make this node final
[ q2 q6 q5 ] {finalnode} forall
% q2 finalnode

% Put labels in nodes
% q0 amoveto [ (0,) Rm (e) Sym ] Centre puttext
q0 amoveto [ (0) Rm ] Centre puttext
q1 amoveto [ (1) Rm ] Centre puttext
q2 amoveto [ (2) Rm ] Centre puttext
q3 amoveto [ (3) Rm ] Centre puttext
q4 amoveto [ (4) Rm ] Centre puttext
q5 amoveto [ (5) Rm ] Centre puttext
q6 amoveto [ (6) Rm ] Centre puttext
%q0 amoveto [ (q) Rm (0) Sub ] Centre puttext
%q1 amoveto [ (q) Rm (1) Sub ] Centre puttext
%q2 amoveto [ (q) Rm (2) Sub ] Centre puttext
%q3 amoveto [ (q) Rm (3) Sub ] Centre puttext
%q4 amoveto [ (q) Rm (4) Sub ] Centre puttext

% Draw transitions...			...and put labels with them
q0 q1   0 .5  trans                     [ (b) Rm ] North puttext
q1 q2   0 .5  trans                     [ (a) Rm ] NorthWest puttext
q1 q3   0 .5  trans                     [ (r) Rm ] NorthEast puttext
q2 q4   0 .5  trans                     [ (b) Rm ] North puttext
q2 q5   0 .5  trans                     [ (r) Rm ] NorthEast puttext
q3 q5   0 .5  trans                     [ (a) Rm ] South puttext
q4 q6  30 .5  trans                     [ (a) Rm ] North puttext
% q4 q4 120 .5  trans % LOOPS WORK NICE!
q6 q4  30 .5  trans                     [ (b) Rm ] South puttext


%
%
%q0 q1  20 .5  trans			[ (It's ) Rm (Super) Super ] NorthWest puttext
%q1 q0  20 .5  trans			[ (b) Rm ] SouthEast puttext
%q1 q2   0 .5  trans			gsave
%					  0 11 rmoveto [ (Symbol:) Rm ] NorthEast puttext
%					grestore
%					[ (Symbol) Sym ] NorthEast puttext
%q2 q2   0 .5  trans			[ (b) Rm ] East puttext
%q3 q1 -60 .25 trans			[ (over) Ovl (lined) Rm ] East puttext
%q4 q3  20 .5  trans			[ (\306\330\305\320\336) Rm ] North puttext
%q3 q4  20 .5  trans			[ (\346\370\345\360\376) Rm ] South puttext
%q0 q2   0 .5  true  true  transition	[ (Both) Rm ] North     puttext
%q0 q4   0 .5  false false transition	[ (None) Rm ] SouthWest puttext
%q3 q3 270 .5  true  true  transition	[ (Both) Rm ] South puttext
%q4 q4 270 .5  false false transition	[ (None) Rm ] South puttext

end

showpage

%%EOF

%%EndDocument
 @endspecial -125 1282 a Fh(Figure)f(7)-125 1407 y Fq(Minimal)h
(automaton)h(accepting)f(the)h(set)e Ff(\()p Fd(ba)p
Ff(\))1260 1375 y Fc(+)1328 1407 y Fb([)f(f)p Fd(bar)q
Fb(g)h([)f(f)p Fd(bra)q Fb(g)p Fq(.)2980 5463 y Fw(19)p
eop
%%Page: 20 20
20 19 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)219 575 y @beginspecial
50 @llx 550 @lly 550 @urx 650 @ury 3000 @rwi @setspecial
%%BeginDocument: carrasco-01-baba.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 50 550 550 650

% Don't forget to adjust the boundingbox!

%%%%%%%% START OF HEADER %%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                             %
%   Automaton transition diagram              %
%                                             %
%   (c) P. Kleiweg  1996, 1998                %
%                                             %
%   Manual available at:                      %
%   http://www.let.rug.nl/~kleiweg/automata/  %
%                                             %
%   Low resolution version                    %
%                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Small changes by MLF: 2001.11.14, as noted  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/petersFSA 256 dict  def
petersFSA begin

% /NodeR  20 def			% Radius for node circle
/NodeR  25 def			% Radius for node circle
/ENodeR NodeR 0.8 mul def	% Radius for inner circle of final node
/LoopR  NodeR 4   mul def	% Radius for loop arc
/LoopW	30 def			% Width for loop arc (degrees)
/NodeW   2 def			% Linewidth for node circle
/ENodeW  1 def			% Linewidth for inner circle of final node
/LineW   2 def			% Linewidth for arcs

/Color true def			% Should we use fill colors?

% /Myfont (Times-Roman) def    % My font
% /Myfont (Helvetica-Medium) def    % My font
 /Myfont (Helvetica-Bold) def    % My font
% /Myfont (Courier-Bold) def    % My font

%%%% FONTS %%%%

/TopSkip    4 def		% Extra white space above text
/BottomSkip 2 def               % Extra white space below text
/SideSkip   3 def               % Extra white space aside of text

/SuperRaise  5 def		% Vertical position for superscript text
/SubLower   -4 def		% Vertical position for subscript text

% Stack in:  NewFontName EncodingVector OldFontName
% Stack out:
/RE {
  findfont
  dup maxlength dict begin
  {
    1 index /FID ne { def } { pop pop } ifelse
  } forall
  /Encoding exch def
  dup /FontName exch def
  currentdict end definefont pop
} bind def

% /Times-Roman-ISOLatin1 ISOLatin1Encoding /Times-Roman RE
%MLF change with font parametrized
/Myfont-ISOLatin1 ISOLatin1Encoding Myfont RE

% Switch to regular font
% Stack in:
% Stack out:
/NormalFont {
%MLF
  /Myfont-ISOLatin1 findfont
%  /Times-Roman-ISOLatin1 findfont
%  14 scalefont
%MLF: I like my font a little bit larger (15% larger)
   16 scalefont
  setfont
} bind def

% Switch to font used for superscript and subscript
% Stack in:
% Stack out:
/SmallFont {
  /Myfont-ISOLatin1 findfont
%MLF  /Times-Roman-ISOLatin1 findfont
%MLF  10 scalefont
%I like my font a little bit bigger (15%)
  11 scalefont
  setfont
} bind def

% Switch to symbol font
% Stack in:
% Stack out:
/SymbolFont {
  /Symbol findfont
% MLF: Larger!
%  14 scalefont
  16 scalefont
  setfont
} bind def

% Calculate height of normal font
gsave
  newpath
  NormalFont
  0 0 moveto
  (\() false charpath
  pathbbox
grestore
/TOP exch def		% height above baseline
pop
/BOTTOM exch def	% depth below baseline (negative number)
pop

%%%% DISPLAYING TEXT %%%%

% Positions for displaying text relative to currentpoint
/Centre	0 def
/North	1 def
/East	2 def
/South	4 def
/West	8 def
/NorthEast North East or def
/NorthWest North West or def
/SouthEast South East or def
/SouthWest South West or def

% Text types
/Rm    1 def	% Use normal text (Roman)
/Super 2 def	% Use superscript
/Sub   3 def	% Use subscript
/Sym   4 def    % Use symbol font
/Ovl   5 def    % Use overlined normal text

% Calculate width of text in pixels
% Stack in:  [ (text1) type1 (text2) type2 ... ] 
% Stack out: width
/textwidth {
  /Txt exch def
  /L 0 def
  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq P Ovl eq or {
      /L L NormalFont T stringwidth pop add def
    } if
    P Super eq P Sub eq or {
      /L L SmallFont T stringwidth pop add def
    } if
    P Sym eq {
      /L L SymbolFont T stringwidth pop add def
    } if
  } for
  L
} bind def

% Display text at currentpoint
% Stack in:  [ (text1) type1 (text2) type2 ... ] position
% Stack out:
/puttext {
  /Pos exch def        % Centre, North, NorthEast, etc
  /Txt exch def

  /Width Txt textwidth def

  Pos West and 0 ne {
    Width neg SideSkip sub 0 rmoveto
  } {
    Pos East and 0 ne {
      SideSkip 0 rmoveto
    } {
      Width 2 div neg 0 rmoveto
    } ifelse
  } ifelse

  Pos North and 0 ne {
    0 BOTTOM neg BottomSkip add rmoveto
  } {
    Pos South and 0 ne {
      0 TOP neg TopSkip sub rmoveto
    } {
      0 TOP BOTTOM add 2 div neg rmoveto
    } ifelse
  } ifelse

  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq {
      NormalFont T show
    } if
    P Super eq {
      0 SuperRaise rmoveto
      SmallFont T show
      0 SuperRaise neg rmoveto
    } if
    P Sub eq {
      0 SubLower rmoveto
      SmallFont T show
      0 SubLower neg rmoveto
    } if
    P Sym eq {
      SymbolFont T show
    } if
    P Ovl eq {
      NormalFont
      gsave
        .5 setlinewidth
        0.6 T maxheight 2 add rmoveto
        T stringwidth pop 2 sub 0 rlineto stroke
      grestore
      T show
    } if
  } for
} bind def

% stack in:  (text)
% stack out: height
/maxheight {
  /MHT exch def
  /MHH 0 def
  0 1 MHT length 1 sub {
    MHT exch 1 getinterval
    gsave
      newpath
      0 0 moveto
      false charpath
      pathbbox
      dup MHH gt {
        /MHH exch def
      } {
        pop
      } ifelse
      pop pop pop
    grestore
  } for
  MHH
} bind def

%%%% DRAWING NODES %%%%

% Draw a node
% Stack in:  [ x y ] red green blue
% Stack out:
/node {
  4 -1 roll
  aload pop
  /Y exch def
  /X exch def

  NodeW setlinewidth
  X NodeR add Y moveto
  X Y NodeR 0 360 arc
  Color {
    gsave
      setrgbcolor
      fill
    grestore
  } {
    pop pop pop
  } ifelse
  stroke
} bind def

% Make node initial
% Stack in:   [ x y ] angle
% Stack uit:
/initialnode {
  gsave
    exch
    aload pop
    translate
    rotate
    NodeR NodeW 2 div add 0 translate
    /N NodeR 3 div def
    0 0 moveto
    N N neg lineto
    N 2 div 0 N 2 div 0 N N curveto
    closepath
    fill
  grestore
} bind def    

% Make node final
% Stack in:   [ x y ]
% Stack out:
/finalnode {
  aload pop
  /Y exch def
  /X exch def
  ENodeW setlinewidth
  X ENodeR add Y moveto
  X Y ENodeR 0 360 arc
  stroke
} bind def

%%%% DRAWING TRANSITIONS %%%%

% Draw arrowhead at x2 y2 from direction x1 y1
% Stack in:  x1 y1 x2 y2
% Stack out:
/arrowHead {
  /AY2 exch def
  /AX2 exch def
  /AY1 exch def
  /AX1 exch def
  gsave
    AX2 AY2 translate
    AY2 AY1 sub AX2 AX1 sub atan rotate
    0 0 moveto
    LineW neg 2 div 0 translate
    -8 LineW mul 2 LineW mul lineto
    -6 LineW mul 0
    -6 LineW mul 0
    -8 LineW mul -2 LineW mul curveto
    closepath
    fill
  grestore
} bind def

% Draw a transition
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part arrow1 arrow2
% Stack out:
/transition {
  /Arrow2 exch def	% Arrow to final node: true / false
  /Arrow1 exch def	% Arrow ot starting node: true / false
  /F exch def		% Position for label (value between 0 and 1)
  /A exch def		% Angle (value between -120 and 120 exclusive for non-loops)
  aload pop
  /Y2 exch def		% Final node
  /X2 exch def		%
  aload pop
  /Y1 exch def		% Starting node
  /X1 exch def		%

  /Clear LineW 4 mul def
  LineW setlinewidth
  X1 X2 eq Y1 Y2 eq and {
    Arrow1 {
      /XX0 A LoopW add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A LoopW add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A LoopW add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A LoopW add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A LoopW add cos NodeR mul X1 add def
      /YY0 A LoopW add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3 A LoopW sub cos NodeR NodeW 2 div add mul X1 add def
      /YY3 A LoopW sub sin NodeR NodeW 2 div add mul Y1 add def
      /XX3i A LoopW sub cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY3i A LoopW sub sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX3 A LoopW sub cos NodeR mul X1 add def
      /YY3 A LoopW sub sin NodeR mul Y1 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /XX1 A LoopW add cos LoopR mul X1 add def
    /YY1 A LoopW add sin LoopR mul Y1 add def
    /XX2 A LoopW sub cos LoopR mul X1 add def
    /YY2 A LoopW sub sin LoopR mul Y1 add def
  } {
    /ALFA Y2 Y1 sub X2 X1 sub atan def
    Arrow1 {
      /XX0 A ALFA add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A ALFA add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A ALFA add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A ALFA add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A ALFA add cos NodeR mul X1 add def
      /YY0 A ALFA add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3  ALFA 180 add A sub cos NodeR NodeW 2 div add mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR NodeW 2 div add mul Y2 add def
      /XX3i ALFA 180 add A sub cos NodeR NodeW 2 div add Clear add mul X2 add def
      /YY3i ALFA 180 add A sub sin NodeR NodeW 2 div add Clear add mul Y2 add def
    } {
      /XX3  ALFA 180 add A sub cos NodeR mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR mul Y2 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /LEN
      XX0 XX3 sub dup mul YY0 YY3 sub dup mul add sqrt
      1 2 A cos mul add
      div
    def
    /XX1 XX0 LEN ALFA A add cos mul add def
    /YY1 YY0 LEN ALFA A add sin mul add def
    /XX2 XX3 LEN ALFA 180 add A sub cos mul add def
    /YY2 YY3 LEN ALFA 180 add A sub sin mul add def
  } ifelse

  XX0i YY0i moveto
  XX1 YY1 XX2 YY2 XX3i YY3i curveto
  stroke

  /Cx XX1 XX0i sub 3 mul def
  /Cy YY1 YY0i sub 3 mul def
  /Bx XX2 XX1 sub 3 mul Cx sub def
  /By YY2 YY1 sub 3 mul Cy sub def
  /Ax XX3i XX0i sub Cx sub Bx sub def
  /Ay YY3i YY0i sub Cy sub By sub def

  /XL F F F mul mul Ax mul F F mul Bx mul add F Cx mul add XX0i add def
  /YL F F F mul mul Ay mul F F mul By mul add F Cy mul add YY0i add def

  Arrow1 {
      XX1 YY1 XX0 YY0 arrowHead
  } if
  Arrow2 {
      XX2 YY2 XX3 YY3 arrowHead
  } if

  XL YL moveto
} bind def

% Draw a transition with arrow to final node
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part
% Stack out:
/trans {
  false true transition
} bind def

%%%% MISC %%%%

 % Stack in:  [ x y ]
% Stack out:
% Result:    x y moveto
/amoveto {
  aload pop
  moveto
} bind def

end

%%%%%%%% END OF HEADER %%%%%%%%

petersFSA begin

% Define locations for nodes
% Don't use capital letters in names
/q0 [ 100 600 ] def
/q1 [ 200 600 ] def
/q2 [ 300 600 ] def
/q3 [ 400 600 ] def
/q4 [ 500 600 ] def


% Draw nodes, using supplied red/green/blue fill color
% [ q0 q1 q2 q3 q4 q5 q6 ] { .9 .9 .9 node } forall (all light grey)
[ q0 q1 q2 q3 q4 ] { 1 1 1 node } forall % (all white)
% q0 1 0.8 0 node % orange
% q2 0 1 1 node

% Make this node initial
q0 180 initialnode
% q2 90 initialnode (two nodes may be initial)

% Make this node final
% [ q2 q6 q5 ] {finalnode} forall
 q4 finalnode

% Put labels in nodes
% q0 amoveto [ (0,) Rm (e) Sym ] Centre puttext
q0 amoveto [ (e) Sym ] Centre puttext
q1 amoveto [ (b) Rm ] Centre puttext
q2 amoveto [ (ba) Rm ] Centre puttext
q3 amoveto [ (bab) Rm ] Centre puttext
q4 amoveto [ (baba) Rm ] Centre puttext


%q4 amoveto [ (q) Rm (4) Sub ] Centre puttext

% Draw transitions...			...and put labels with them
q0 q1   0 .5  trans                     [ (b) Rm ] North puttext
q1 q2   0 .5  trans                     [ (a) Rm ] North puttext
q2 q3   0 .5  trans                     [ (b) Rm ] North puttext
q3 q4   0 .5  trans                     [ (a) Rm ] North puttext
% q2 q4   0 .5  trans                     [ (b) Rm ] North puttext
% q2 q5   0 .5  trans                     [ (r) Rm ] NorthEast puttext
% q3 q5   0 .5  trans                     [ (a) Rm ] South puttext
% q4 q6  30 .5  trans                     [ (a) Rm ] North puttext
% q4 q4 120 .5  trans % LOOPS WORK NICE!
% q6 q4  30 .5  trans                     [ (b) Rm ] South puttext


%
%
%q0 q1  20 .5  trans			[ (It's ) Rm (Super) Super ] NorthWest puttext
%q1 q0  20 .5  trans			[ (b) Rm ] SouthEast puttext
%q1 q2   0 .5  trans			gsave
%					  0 11 rmoveto [ (Symbol:) Rm ] NorthEast puttext
%					grestore
%					[ (Symbol) Sym ] NorthEast puttext
%q2 q2   0 .5  trans			[ (b) Rm ] East puttext
%q3 q1 -60 .25 trans			[ (over) Ovl (lined) Rm ] East puttext
%q4 q3  20 .5  trans			[ (\306\330\305\320\336) Rm ] North puttext
%q3 q4  20 .5  trans			[ (\346\370\345\360\376) Rm ] South puttext
%q0 q2   0 .5  true  true  transition	[ (Both) Rm ] North     puttext
%q0 q4   0 .5  false false transition	[ (None) Rm ] SouthWest puttext
%q3 q3 270 .5  true  true  transition	[ (Both) Rm ] South puttext
%q4 q4 270 .5  false false transition	[ (None) Rm ] South puttext

end

showpage

%%EOF

%%EndDocument
 @endspecial -125 782 a Fh(Figure)g(8)-125 907 y Fq(Single-string)g
(automaton)i(accepting)f(the)h(string)e Fd(baba)q Fq(.)-125
5463 y Fw(20)p eop
%%Page: 21 21
21 20 bop -125 -108 a Fq(Carrasco)19 b(and)g(For)o(cada)972
b(Incr)o(emental)19 b(Constr)o(uction)h(of)e(Minimal)h(FSA)219
1575 y @beginspecial 50 @llx 400 @lly 550 @urx 700 @ury
3000 @rwi @setspecial
%%BeginDocument: carrasco-01-ex2baba.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 50 400 550 700

% Don't forget to adjust the boundingbox!

%%%%%%%% START OF HEADER %%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                             %
%   Automaton transition diagram              %
%                                             %
%   (c) P. Kleiweg  1996, 1998                %
%                                             %
%   Manual available at:                      %
%   http://www.let.rug.nl/~kleiweg/automata/  %
%                                             %
%   Low resolution version                    %
%                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Small changes by MLF: 2001.11.14, as noted  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/petersFSA 256 dict  def
petersFSA begin

% /NodeR  20 def			% Radius for node circle
/NodeR  28 def			% Radius for node circle
/ENodeR NodeR 0.8 mul def	% Radius for inner circle of final node
/LoopR  NodeR 4   mul def	% Radius for loop arc
/LoopW	30 def			% Width for loop arc (degrees)
/NodeW   2 def			% Linewidth for node circle
/ENodeW  1 def			% Linewidth for inner circle of final node
/LineW   2 def			% Linewidth for arcs

/Color true def			% Should we use fill colors?

% /Myfont (Times-Roman) def    % My font
% /Myfont (Helvetica-Medium) def    % My font
 /Myfont (Helvetica-Bold) def    % My font
% /Myfont (Courier-Bold) def    % My font

%%%% FONTS %%%%

/TopSkip    4 def		% Extra white space above text
/BottomSkip 2 def               % Extra white space below text
/SideSkip   3 def               % Extra white space aside of text

/SuperRaise  5 def		% Vertical position for superscript text
/SubLower   -4 def		% Vertical position for subscript text

% Stack in:  NewFontName EncodingVector OldFontName
% Stack out:
/RE {
  findfont
  dup maxlength dict begin
  {
    1 index /FID ne { def } { pop pop } ifelse
  } forall
  /Encoding exch def
  dup /FontName exch def
  currentdict end definefont pop
} bind def

% /Times-Roman-ISOLatin1 ISOLatin1Encoding /Times-Roman RE
%MLF change with font parametrized
/Myfont-ISOLatin1 ISOLatin1Encoding Myfont RE

% Switch to regular font
% Stack in:
% Stack out:
/NormalFont {
%MLF
  /Myfont-ISOLatin1 findfont
%  /Times-Roman-ISOLatin1 findfont
%  14 scalefont
%MLF: I like my font a little bit larger (15% larger)
   16 scalefont
  setfont
} bind def

% Switch to font used for superscript and subscript
% Stack in:
% Stack out:
/SmallFont {
  /Myfont-ISOLatin1 findfont
%MLF  /Times-Roman-ISOLatin1 findfont
%MLF  10 scalefont
%I like my font a little bit bigger (15%)
  11 scalefont
  setfont
} bind def

% Switch to symbol font
% Stack in:
% Stack out:
/SymbolFont {
%  /Symbol findfont
   /Symbol findfont
%MLF a bit bigger  
% 14 scalefont
  16 scalefont
  setfont
} bind def

% Calculate height of normal font
gsave
  newpath
  NormalFont
  0 0 moveto
  (\() false charpath
  pathbbox
grestore
/TOP exch def		% height above baseline
pop
/BOTTOM exch def	% depth below baseline (negative number)
pop

%%%% DISPLAYING TEXT %%%%

% Positions for displaying text relative to currentpoint
/Centre	0 def
/North	1 def
/East	2 def
/South	4 def
/West	8 def
/NorthEast North East or def
/NorthWest North West or def
/SouthEast South East or def
/SouthWest South West or def

% Text types
/Rm    1 def	% Use normal text (Roman)
/Super 2 def	% Use superscript
/Sub   3 def	% Use subscript
/Sym   4 def    % Use symbol font
/Ovl   5 def    % Use overlined normal text

% Calculate width of text in pixels
% Stack in:  [ (text1) type1 (text2) type2 ... ] 
% Stack out: width
/textwidth {
  /Txt exch def
  /L 0 def
  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq P Ovl eq or {
      /L L NormalFont T stringwidth pop add def
    } if
    P Super eq P Sub eq or {
      /L L SmallFont T stringwidth pop add def
    } if
    P Sym eq {
      /L L SymbolFont T stringwidth pop add def
    } if
  } for
  L
} bind def

% Display text at currentpoint
% Stack in:  [ (text1) type1 (text2) type2 ... ] position
% Stack out:
/puttext {
  /Pos exch def        % Centre, North, NorthEast, etc
  /Txt exch def

  /Width Txt textwidth def

  Pos West and 0 ne {
    Width neg SideSkip sub 0 rmoveto
  } {
    Pos East and 0 ne {
      SideSkip 0 rmoveto
    } {
      Width 2 div neg 0 rmoveto
    } ifelse
  } ifelse

  Pos North and 0 ne {
    0 BOTTOM neg BottomSkip add rmoveto
  } {
    Pos South and 0 ne {
      0 TOP neg TopSkip sub rmoveto
    } {
      0 TOP BOTTOM add 2 div neg rmoveto
    } ifelse
  } ifelse

  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq {
      NormalFont T show
    } if
    P Super eq {
      0 SuperRaise rmoveto
      SmallFont T show
      0 SuperRaise neg rmoveto
    } if
    P Sub eq {
      0 SubLower rmoveto
      SmallFont T show
      0 SubLower neg rmoveto
    } if
    P Sym eq {
      SymbolFont T show
    } if
    P Ovl eq {
      NormalFont
      gsave
        .5 setlinewidth
        0.6 T maxheight 2 add rmoveto
        T stringwidth pop 2 sub 0 rlineto stroke
      grestore
      T show
    } if
  } for
} bind def

% stack in:  (text)
% stack out: height
/maxheight {
  /MHT exch def
  /MHH 0 def
  0 1 MHT length 1 sub {
    MHT exch 1 getinterval
    gsave
      newpath
      0 0 moveto
      false charpath
      pathbbox
      dup MHH gt {
        /MHH exch def
      } {
        pop
      } ifelse
      pop pop pop
    grestore
  } for
  MHH
} bind def

%%%% DRAWING NODES %%%%

% Draw a node
% Stack in:  [ x y ] red green blue
% Stack out:
/node {
  4 -1 roll
  aload pop
  /Y exch def
  /X exch def

  NodeW setlinewidth
  X NodeR add Y moveto
  X Y NodeR 0 360 arc
  Color {
    gsave
      setrgbcolor
      fill
    grestore
  } {
    pop pop pop
  } ifelse
  stroke
} bind def

% Make node initial
% Stack in:   [ x y ] angle
% Stack uit:
/initialnode {
  gsave
    exch
    aload pop
    translate
    rotate
    NodeR NodeW 2 div add 0 translate
    /N NodeR 3 div def
    0 0 moveto
    N N neg lineto
    N 2 div 0 N 2 div 0 N N curveto
    closepath
    fill
  grestore
} bind def    

% Make node final
% Stack in:   [ x y ]
% Stack out:
/finalnode {
  aload pop
  /Y exch def
  /X exch def
  ENodeW setlinewidth
  X ENodeR add Y moveto
  X Y ENodeR 0 360 arc
  stroke
} bind def

%%%% DRAWING TRANSITIONS %%%%

% Draw arrowhead at x2 y2 from direction x1 y1
% Stack in:  x1 y1 x2 y2
% Stack out:
/arrowHead {
  /AY2 exch def
  /AX2 exch def
  /AY1 exch def
  /AX1 exch def
  gsave
    AX2 AY2 translate
    AY2 AY1 sub AX2 AX1 sub atan rotate
    0 0 moveto
    LineW neg 2 div 0 translate
    -8 LineW mul 2 LineW mul lineto
    -6 LineW mul 0
    -6 LineW mul 0
    -8 LineW mul -2 LineW mul curveto
    closepath
    fill
  grestore
} bind def

% Draw a transition
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part arrow1 arrow2
% Stack out:
/transition {
  /Arrow2 exch def	% Arrow to final node: true / false
  /Arrow1 exch def	% Arrow ot starting node: true / false
  /F exch def		% Position for label (value between 0 and 1)
  /A exch def		% Angle (value between -120 and 120 exclusive for non-loops)
  aload pop
  /Y2 exch def		% Final node
  /X2 exch def		%
  aload pop
  /Y1 exch def		% Starting node
  /X1 exch def		%

  /Clear LineW 4 mul def
  LineW setlinewidth
  X1 X2 eq Y1 Y2 eq and {
    Arrow1 {
      /XX0 A LoopW add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A LoopW add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A LoopW add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A LoopW add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A LoopW add cos NodeR mul X1 add def
      /YY0 A LoopW add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3 A LoopW sub cos NodeR NodeW 2 div add mul X1 add def
      /YY3 A LoopW sub sin NodeR NodeW 2 div add mul Y1 add def
      /XX3i A LoopW sub cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY3i A LoopW sub sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX3 A LoopW sub cos NodeR mul X1 add def
      /YY3 A LoopW sub sin NodeR mul Y1 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /XX1 A LoopW add cos LoopR mul X1 add def
    /YY1 A LoopW add sin LoopR mul Y1 add def
    /XX2 A LoopW sub cos LoopR mul X1 add def
    /YY2 A LoopW sub sin LoopR mul Y1 add def
  } {
    /ALFA Y2 Y1 sub X2 X1 sub atan def
    Arrow1 {
      /XX0 A ALFA add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A ALFA add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A ALFA add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A ALFA add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A ALFA add cos NodeR mul X1 add def
      /YY0 A ALFA add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3  ALFA 180 add A sub cos NodeR NodeW 2 div add mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR NodeW 2 div add mul Y2 add def
      /XX3i ALFA 180 add A sub cos NodeR NodeW 2 div add Clear add mul X2 add def
      /YY3i ALFA 180 add A sub sin NodeR NodeW 2 div add Clear add mul Y2 add def
    } {
      /XX3  ALFA 180 add A sub cos NodeR mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR mul Y2 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /LEN
      XX0 XX3 sub dup mul YY0 YY3 sub dup mul add sqrt
      1 2 A cos mul add
      div
    def
    /XX1 XX0 LEN ALFA A add cos mul add def
    /YY1 YY0 LEN ALFA A add sin mul add def
    /XX2 XX3 LEN ALFA 180 add A sub cos mul add def
    /YY2 YY3 LEN ALFA 180 add A sub sin mul add def
  } ifelse

  XX0i YY0i moveto
  XX1 YY1 XX2 YY2 XX3i YY3i curveto
  stroke

  /Cx XX1 XX0i sub 3 mul def
  /Cy YY1 YY0i sub 3 mul def
  /Bx XX2 XX1 sub 3 mul Cx sub def
  /By YY2 YY1 sub 3 mul Cy sub def
  /Ax XX3i XX0i sub Cx sub Bx sub def
  /Ay YY3i YY0i sub Cy sub By sub def

  /XL F F F mul mul Ax mul F F mul Bx mul add F Cx mul add XX0i add def
  /YL F F F mul mul Ay mul F F mul By mul add F Cy mul add YY0i add def

  Arrow1 {
      XX1 YY1 XX0 YY0 arrowHead
  } if
  Arrow2 {
      XX2 YY2 XX3 YY3 arrowHead
  } if

  XL YL moveto
} bind def

% Draw a transition with arrow to final node
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part
% Stack out:
/trans {
  false true transition
} bind def

%%%% MISC %%%%

 % Stack in:  [ x y ]
% Stack out:
% Result:    x y moveto
/amoveto {
  aload pop
  moveto
} bind def

end

%%%%%%%% END OF HEADER %%%%%%%%

petersFSA begin

% Define locations for nodes
% Don't use capital letters in names
/q0 [ 100 600 ] def
/q1 [ 200 600 ] def
/q2 [ 300 650 ] def
/q3 [ 300 550 ] def
/q4 [ 400 650 ] def
/q5 [ 400 550 ] def 
/q6 [ 500 650 ] def
/q7 [ 100 450 ] def
/q8 [ 200 450 ] def
/q9 [ 300 450 ] def
/q10 [ 400 450 ] def
/q11 [ 500 450 ] def

% Draw nodes, using supplied red/green/blue fill color
[ q0 q1 q2 ] { .9 .9 .9 node } forall 
[ q3 q4 q5 q6 q7 q8 q9 q10 q11 ] { 1 1 1 node } forall
% q0 1 0.8 0 node % orange
% q2 0 1 1 node

% Make this node initial
q7 180 initialnode
% q2 90 initialnode (two nodes may be initial)

% Make this node final
[ q2 q5 q6 q9 ] { finalnode } forall
% q2 finalnode

% Put labels in nodes
q0 amoveto [ (0,) Rm (^) Sym (w) Sub ] Centre puttext
q1 amoveto [ (1,) Rm (^) Sym (w) Sub ] Centre puttext
q2 amoveto [ (2,) Rm (^) Sym (w) Sub ] Centre puttext
q3 amoveto [ (3,) Rm (^) Sym (w) Sub ] Centre puttext
q4 amoveto [ (4,) Rm (^) Sym (w) Sub ] Centre puttext
q5 amoveto [ (5,) Rm (^) Sym (w) Sub ] Centre puttext
q6 amoveto [ (6,) Rm (^) Sym (w) Sub ] Centre puttext
q7 amoveto [ (0,) Rm (e) Sym ] Centre puttext
q8 amoveto [ (1,b) Rm ] Centre puttext
q9 amoveto [ (2,ba) Rm ] Centre puttext
q10 amoveto [ (4,bab) Rm ] Centre puttext
q11 amoveto [ (6,baba) Rm ] Centre puttext

%q1 amoveto [ (q) Rm (1) Sub ] Centre puttext
%q2 amoveto [ (q) Rm (2) Sub ] Centre puttext
%q3 amoveto [ (q) Rm (3) Sub ] Centre puttext
%q4 amoveto [ (q) Rm (4) Sub ] Centre puttext

% Draw transitions...			...and put labels with them
q0 q1   0 .5  trans                     [ (b) Rm ] North puttext
q1 q2   0 .5  trans                     [ (a) Rm ] NorthEast puttext
q1 q3   0 .5  trans                     [ (r) Rm ] NorthWest puttext
q2 q4   0 .5  trans                     [ (b) Rm ] North puttext
q2 q5   0 .5  trans                     [ (r) Rm ] NorthEast puttext
q3 q5   0 .5  trans                     [ (a) Rm ] North puttext
q4 q6  30 .5  trans                     [ (a) Rm ] North puttext
q6 q4  30 .5  trans                     [ (b) Rm ] South puttext
q7 q8   0 .5  trans                     [ (b) Rm ] North puttext
q8 q3   0 .5  trans                     [ (r) Rm ] NorthWest puttext
q8 q9   0 .5  trans                     [ (a) Rm ] North puttext
q9 q5   0 .5  trans                     [ (r) Rm ] NorthWest puttext
q9 q10  0 .5  trans                     [ (b) Rm ] North puttext
q10 q11 0 .5  trans                     [ (a) Rm ] North puttext
q11 q4  0 .5  trans                     [ (b) Rm ] NorthEast puttext


end

showpage

%%EOF

%%EndDocument
 @endspecial -125 1782 a Fh(Figure)f(9)-125 1907 y Fq(Unminimized)h
(automaton)h(accepting)g(the)f(set)g Ff(\()p Fd(ba)p
Ff(\))1439 1875 y Fc(+)1506 1907 y Fb([)f(f)p Fd(bar)q
Fb(g)f([)h(f)p Fd(bra)q Fb(g)f(\000)g(f)p Fd(baba)q Fb(g)p
Fq(.)i(Shadowed)g(states)-125 2031 y Ff(\(0)p Fe(;)14
b Fb(?)39 2039 y Fa(w)88 2031 y Ff(\))p Fq(,)k Ff(\(1)p
Fe(;)13 b Fb(?)318 2039 y Fa(w)367 2031 y Ff(\))18 b
Fq(and)i Ff(\(2)p Fe(;)13 b Fb(?)724 2039 y Fa(w)773
2031 y Ff(\))18 b Fq(have)i(become)e(unr)o(eachable)i(\(have)f(no)g
(incoming)g(transitions\))g(and)g(ar)o(e)-125 2156 y(eliminated)g(pr)o
(ecisely)d(in)j(that)h(or)o(der)-6 b(.)2980 5463 y Fw(21)p
eop
%%Page: 22 22
22 21 bop -125 -108 a Fq(Computational)20 b(Linguistics)811
b(V)-8 b(olume)18 b(0,)h(Number)f(0)-31 1075 y @beginspecial
50 @llx 500 @lly 650 @urx 700 @ury 3600 @rwi @setspecial
%%BeginDocument: carrasco-01-ex3.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 50 500 650 700

% Don't forget to adjust the boundingbox!

%%%%%%%% START OF HEADER %%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                             %
%   Automaton transition diagram              %
%                                             %
%   (c) P. Kleiweg  1996, 1998                %
%                                             %
%   Manual available at:                      %
%   http://www.let.rug.nl/~kleiweg/automata/  %
%                                             %
%   Low resolution version                    %
%                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Small changes by MLF: 2001.11.14, as noted  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/petersFSA 256 dict  def
petersFSA begin

/NodeR  20 def			% Radius for node circle
/ENodeR NodeR 0.8 mul def	% Radius for inner circle of final node
/LoopR  NodeR 4   mul def	% Radius for loop arc
/LoopW	30 def			% Width for loop arc (degrees)
/NodeW   2 def			% Linewidth for node circle
/ENodeW  1 def			% Linewidth for inner circle of final node
/LineW   2 def			% Linewidth for arcs

/Color true def			% Should we use fill colors?

% /Myfont (Times-Roman) def    % My font
% /Myfont (Helvetica-Medium) def    % My font
 /Myfont (Helvetica-Bold) def    % My font
% /Myfont (Courier-Bold) def    % My font

%%%% FONTS %%%%

/TopSkip    4 def		% Extra white space above text
/BottomSkip 2 def               % Extra white space below text
/SideSkip   3 def               % Extra white space aside of text

/SuperRaise  5 def		% Vertical position for superscript text
/SubLower   -4 def		% Vertical position for subscript text

% Stack in:  NewFontName EncodingVector OldFontName
% Stack out:
/RE {
  findfont
  dup maxlength dict begin
  {
    1 index /FID ne { def } { pop pop } ifelse
  } forall
  /Encoding exch def
  dup /FontName exch def
  currentdict end definefont pop
} bind def

% /Times-Roman-ISOLatin1 ISOLatin1Encoding /Times-Roman RE
%MLF change with font parametrized
/Myfont-ISOLatin1 ISOLatin1Encoding Myfont RE

% Switch to regular font
% Stack in:
% Stack out:
/NormalFont {
%MLF
  /Myfont-ISOLatin1 findfont
%  /Times-Roman-ISOLatin1 findfont
%  14 scalefont
%MLF: I like my font a little bit larger (15% larger)
   16 scalefont
  setfont
} bind def

% Switch to font used for superscript and subscript
% Stack in:
% Stack out:
/SmallFont {
  /Myfont-ISOLatin1 findfont
%MLF  /Times-Roman-ISOLatin1 findfont
%MLF  10 scalefont
%I like my font a little bit bigger (15%)
  11 scalefont
  setfont
} bind def

% Switch to symbol font
% Stack in:
% Stack out:
/SymbolFont {
%  /Symbol findfont
   /Symbol findfont
%MLF a bit bigger  
% 14 scalefont
  16 scalefont
  setfont
} bind def

% Calculate height of normal font
gsave
  newpath
  NormalFont
  0 0 moveto
  (\() false charpath
  pathbbox
grestore
/TOP exch def		% height above baseline
pop
/BOTTOM exch def	% depth below baseline (negative number)
pop

%%%% DISPLAYING TEXT %%%%

% Positions for displaying text relative to currentpoint
/Centre	0 def
/North	1 def
/East	2 def
/South	4 def
/West	8 def
/NorthEast North East or def
/NorthWest North West or def
/SouthEast South East or def
/SouthWest South West or def

% Text types
/Rm    1 def	% Use normal text (Roman)
/Super 2 def	% Use superscript
/Sub   3 def	% Use subscript
/Sym   4 def    % Use symbol font
/Ovl   5 def    % Use overlined normal text

% Calculate width of text in pixels
% Stack in:  [ (text1) type1 (text2) type2 ... ] 
% Stack out: width
/textwidth {
  /Txt exch def
  /L 0 def
  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq P Ovl eq or {
      /L L NormalFont T stringwidth pop add def
    } if
    P Super eq P Sub eq or {
      /L L SmallFont T stringwidth pop add def
    } if
    P Sym eq {
      /L L SymbolFont T stringwidth pop add def
    } if
  } for
  L
} bind def

% Display text at currentpoint
% Stack in:  [ (text1) type1 (text2) type2 ... ] position
% Stack out:
/puttext {
  /Pos exch def        % Centre, North, NorthEast, etc
  /Txt exch def

  /Width Txt textwidth def

  Pos West and 0 ne {
    Width neg SideSkip sub 0 rmoveto
  } {
    Pos East and 0 ne {
      SideSkip 0 rmoveto
    } {
      Width 2 div neg 0 rmoveto
    } ifelse
  } ifelse

  Pos North and 0 ne {
    0 BOTTOM neg BottomSkip add rmoveto
  } {
    Pos South and 0 ne {
      0 TOP neg TopSkip sub rmoveto
    } {
      0 TOP BOTTOM add 2 div neg rmoveto
    } ifelse
  } ifelse

  0 2 Txt length 2 sub {
    dup
    Txt exch get /T exch def
    Txt exch 1 add get /P exch def
    P Rm eq {
      NormalFont T show
    } if
    P Super eq {
      0 SuperRaise rmoveto
      SmallFont T show
      0 SuperRaise neg rmoveto
    } if
    P Sub eq {
      0 SubLower rmoveto
      SmallFont T show
      0 SubLower neg rmoveto
    } if
    P Sym eq {
      SymbolFont T show
    } if
    P Ovl eq {
      NormalFont
      gsave
        .5 setlinewidth
        0.6 T maxheight 2 add rmoveto
        T stringwidth pop 2 sub 0 rlineto stroke
      grestore
      T show
    } if
  } for
} bind def

% stack in:  (text)
% stack out: height
/maxheight {
  /MHT exch def
  /MHH 0 def
  0 1 MHT length 1 sub {
    MHT exch 1 getinterval
    gsave
      newpath
      0 0 moveto
      false charpath
      pathbbox
      dup MHH gt {
        /MHH exch def
      } {
        pop
      } ifelse
      pop pop pop
    grestore
  } for
  MHH
} bind def

%%%% DRAWING NODES %%%%

% Draw a node
% Stack in:  [ x y ] red green blue
% Stack out:
/node {
  4 -1 roll
  aload pop
  /Y exch def
  /X exch def

  NodeW setlinewidth
  X NodeR add Y moveto
  X Y NodeR 0 360 arc
  Color {
    gsave
      setrgbcolor
      fill
    grestore
  } {
    pop pop pop
  } ifelse
  stroke
} bind def

% Make node initial
% Stack in:   [ x y ] angle
% Stack uit:
/initialnode {
  gsave
    exch
    aload pop
    translate
    rotate
    NodeR NodeW 2 div add 0 translate
    /N NodeR 3 div def
    0 0 moveto
    N N neg lineto
    N 2 div 0 N 2 div 0 N N curveto
    closepath
    fill
  grestore
} bind def    

% Make node final
% Stack in:   [ x y ]
% Stack out:
/finalnode {
  aload pop
  /Y exch def
  /X exch def
  ENodeW setlinewidth
  X ENodeR add Y moveto
  X Y ENodeR 0 360 arc
  stroke
} bind def

%%%% DRAWING TRANSITIONS %%%%

% Draw arrowhead at x2 y2 from direction x1 y1
% Stack in:  x1 y1 x2 y2
% Stack out:
/arrowHead {
  /AY2 exch def
  /AX2 exch def
  /AY1 exch def
  /AX1 exch def
  gsave
    AX2 AY2 translate
    AY2 AY1 sub AX2 AX1 sub atan rotate
    0 0 moveto
    LineW neg 2 div 0 translate
    -8 LineW mul 2 LineW mul lineto
    -6 LineW mul 0
    -6 LineW mul 0
    -8 LineW mul -2 LineW mul curveto
    closepath
    fill
  grestore
} bind def

% Draw a transition
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part arrow1 arrow2
% Stack out:
/transition {
  /Arrow2 exch def	% Arrow to final node: true / false
  /Arrow1 exch def	% Arrow ot starting node: true / false
  /F exch def		% Position for label (value between 0 and 1)
  /A exch def		% Angle (value between -120 and 120 exclusive for non-loops)
  aload pop
  /Y2 exch def		% Final node
  /X2 exch def		%
  aload pop
  /Y1 exch def		% Starting node
  /X1 exch def		%

  /Clear LineW 4 mul def
  LineW setlinewidth
  X1 X2 eq Y1 Y2 eq and {
    Arrow1 {
      /XX0 A LoopW add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A LoopW add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A LoopW add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A LoopW add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A LoopW add cos NodeR mul X1 add def
      /YY0 A LoopW add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3 A LoopW sub cos NodeR NodeW 2 div add mul X1 add def
      /YY3 A LoopW sub sin NodeR NodeW 2 div add mul Y1 add def
      /XX3i A LoopW sub cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY3i A LoopW sub sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX3 A LoopW sub cos NodeR mul X1 add def
      /YY3 A LoopW sub sin NodeR mul Y1 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /XX1 A LoopW add cos LoopR mul X1 add def
    /YY1 A LoopW add sin LoopR mul Y1 add def
    /XX2 A LoopW sub cos LoopR mul X1 add def
    /YY2 A LoopW sub sin LoopR mul Y1 add def
  } {
    /ALFA Y2 Y1 sub X2 X1 sub atan def
    Arrow1 {
      /XX0 A ALFA add cos NodeR NodeW 2 div add mul X1 add def
      /YY0 A ALFA add sin NodeR NodeW 2 div add mul Y1 add def
      /XX0i A ALFA add cos NodeR NodeW 2 div add Clear add mul X1 add def
      /YY0i A ALFA add sin NodeR NodeW 2 div add Clear add mul Y1 add def
    } {
      /XX0 A ALFA add cos NodeR mul X1 add def
      /YY0 A ALFA add sin NodeR mul Y1 add def
      /XX0i XX0 def
      /YY0i YY0 def
    } ifelse
    Arrow2 {
      /XX3  ALFA 180 add A sub cos NodeR NodeW 2 div add mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR NodeW 2 div add mul Y2 add def
      /XX3i ALFA 180 add A sub cos NodeR NodeW 2 div add Clear add mul X2 add def
      /YY3i ALFA 180 add A sub sin NodeR NodeW 2 div add Clear add mul Y2 add def
    } {
      /XX3  ALFA 180 add A sub cos NodeR mul X2 add def
      /YY3  ALFA 180 add A sub sin NodeR mul Y2 add def
      /XX3i XX3 def
      /YY3i YY3 def
    } ifelse
    /LEN
      XX0 XX3 sub dup mul YY0 YY3 sub dup mul add sqrt
      1 2 A cos mul add
      div
    def
    /XX1 XX0 LEN ALFA A add cos mul add def
    /YY1 YY0 LEN ALFA A add sin mul add def
    /XX2 XX3 LEN ALFA 180 add A sub cos mul add def
    /YY2 YY3 LEN ALFA 180 add A sub sin mul add def
  } ifelse

  XX0i YY0i moveto
  XX1 YY1 XX2 YY2 XX3i YY3i curveto
  stroke

  /Cx XX1 XX0i sub 3 mul def
  /Cy YY1 YY0i sub 3 mul def
  /Bx XX2 XX1 sub 3 mul Cx sub def
  /By YY2 YY1 sub 3 mul Cy sub def
  /Ax XX3i XX0i sub Cx sub Bx sub def
  /Ay YY3i YY0i sub Cy sub By sub def

  /XL F F F mul mul Ax mul F F mul Bx mul add F Cx mul add XX0i add def
  /YL F F F mul mul Ay mul F F mul By mul add F Cy mul add YY0i add def

  Arrow1 {
      XX1 YY1 XX0 YY0 arrowHead
  } if
  Arrow2 {
      XX2 YY2 XX3 YY3 arrowHead
  } if

  XL YL moveto
} bind def

% Draw a transition with arrow to final node
% Stack in:  [ x1 y1 ] [ x2 y2 ] angle part
% Stack out:
/trans {
  false true transition
} bind def

%%%% MISC %%%%

 % Stack in:  [ x y ]
% Stack out:
% Result:    x y moveto
/amoveto {
  aload pop
  moveto
} bind def

end

%%%%%%%% END OF HEADER %%%%%%%%

petersFSA begin

% Define locations for nodes
% Don't use capital letters in names
/q0 [ 100 600 ] def
/q1 [ 200 600 ] def
/q2 [ 300 650 ] def
/q3 [ 300 550 ] def
/q4 [ 400 650 ] def
/q5 [ 400 550 ] def 
/q6 [ 500 550 ] def
/q7 [ 500 650 ] def
/q8 [ 600 650 ] def

% Draw nodes, using supplied red/green/blue fill color
[ q0 q1 q2 q3 q4 q5 q6 q7 q8 ] { 1 1 1 node } forall
% q0 1 0.8 0 node % orange
% q2 0 1 1 node

% Make this node initial
q0 180 initialnode
% q2 90 initialnode (two nodes may be initial)

% Make this node final
[ q3 q4 q8 ] { finalnode } forall
% q2 finalnode

% Put labels in nodes
q0 amoveto [ (0) Rm ] Centre puttext
q1 amoveto [ (1) Rm ] Centre puttext
q2 amoveto [ (2) Rm ] Centre puttext
q3 amoveto [ (3) Rm ] Centre puttext
q4 amoveto [ (4) Rm ] Centre puttext
q5 amoveto [ (5) Rm ] Centre puttext
q6 amoveto [ (6) Rm ] Centre puttext
q7 amoveto [ (7) Rm ] Centre puttext
q8 amoveto [ (8) Rm ] Centre puttext

% Draw transitions...			...and put labels with them
q0 q1   0 .5  trans                     [ (b) Rm ] North puttext
q1 q2   0 .5  trans                     [ (r) Rm ] NorthWest puttext
q1 q3   0 .5  trans                     [ (a) Rm ] NorthEast puttext
q2 q4   0 .5  trans                     [ (a) Rm ] North puttext
q3 q4   0 .5  trans                     [ (r) Rm ] NorthWest puttext
q3 q5   0 .5  trans                     [ (b) Rm ] North puttext
q5 q6   0 .5  trans                     [ (a) Rm ] North puttext
q6 q7   0 .5  trans                     [ (b) Rm ] West puttext
q7 q8   30 .5  trans                    [ (a) Rm ] North puttext
q8 q7   30 .5  trans                    [ (b) Rm ] South puttext

end

showpage

%%EOF

%%EndDocument
 @endspecial -125 1282 a Fh(Figure)g(10)-125 1407 y Fq(Minimal)h
(automaton)h(accepting)f(the)h(set)e Ff(\()p Fd(ba)p
Ff(\))1260 1375 y Fc(+)1328 1407 y Fb([)f(f)p Fd(bar)q
Fb(g)h([)f(f)p Fd(bra)q Fb(g)h(\000)f(f)p Fd(baba)q Fb(g)p
Fq(.)-125 5463 y Fw(22)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
